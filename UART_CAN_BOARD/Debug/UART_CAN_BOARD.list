
UART_CAN_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007808  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007974  08007974  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007974  08007974  00009010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007974  08007974  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800797c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001434  20000010  0800798c  00009010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001444  0800798c  00009444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016dbc  00000000  00000000  00009039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b48  00000000  00000000  0001fdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00023940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001059  00000000  00000000  00024e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a308  00000000  00000000  00025ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f66  00000000  00000000  000401e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009848b  00000000  00000000  00059147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f15d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  000f1618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f6d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08007900 	.word	0x08007900

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08007900 	.word	0x08007900

08000150 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000154:	4b16      	ldr	r3, [pc, #88]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000156:	4a17      	ldr	r2, [pc, #92]	@ (80001b4 <MX_CAN_Init+0x64>)
 8000158:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800015a:	4b15      	ldr	r3, [pc, #84]	@ (80001b0 <MX_CAN_Init+0x60>)
 800015c:	2210      	movs	r2, #16
 800015e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000160:	4b13      	ldr	r3, [pc, #76]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000162:	2200      	movs	r2, #0
 8000164:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000166:	4b12      	ldr	r3, [pc, #72]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000168:	2200      	movs	r2, #0
 800016a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800016c:	4b10      	ldr	r3, [pc, #64]	@ (80001b0 <MX_CAN_Init+0x60>)
 800016e:	2200      	movs	r2, #0
 8000170:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000172:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000174:	2200      	movs	r2, #0
 8000176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000178:	4b0d      	ldr	r3, [pc, #52]	@ (80001b0 <MX_CAN_Init+0x60>)
 800017a:	2200      	movs	r2, #0
 800017c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017e:	4b0c      	ldr	r3, [pc, #48]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000180:	2200      	movs	r2, #0
 8000182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000184:	4b0a      	ldr	r3, [pc, #40]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000186:	2200      	movs	r2, #0
 8000188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018a:	4b09      	ldr	r3, [pc, #36]	@ (80001b0 <MX_CAN_Init+0x60>)
 800018c:	2200      	movs	r2, #0
 800018e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000190:	4b07      	ldr	r3, [pc, #28]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000192:	2200      	movs	r2, #0
 8000194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000196:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <MX_CAN_Init+0x60>)
 8000198:	2200      	movs	r2, #0
 800019a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <MX_CAN_Init+0x60>)
 800019e:	f000 fd0b 	bl	8000bb8 <HAL_CAN_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80001a8:	f000 f966 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b08a      	sub	sp, #40	@ 0x28
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0314 	add.w	r3, r7, #20
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000288 <HAL_CAN_MspInit+0xd0>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d153      	bne.n	8000280 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b2c      	ldr	r3, [pc, #176]	@ (800028c <HAL_CAN_MspInit+0xd4>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a2b      	ldr	r2, [pc, #172]	@ (800028c <HAL_CAN_MspInit+0xd4>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b29      	ldr	r3, [pc, #164]	@ (800028c <HAL_CAN_MspInit+0xd4>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80001ec:	613b      	str	r3, [r7, #16]
 80001ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f0:	4b26      	ldr	r3, [pc, #152]	@ (800028c <HAL_CAN_MspInit+0xd4>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a25      	ldr	r2, [pc, #148]	@ (800028c <HAL_CAN_MspInit+0xd4>)
 80001f6:	f043 0308 	orr.w	r3, r3, #8
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b23      	ldr	r3, [pc, #140]	@ (800028c <HAL_CAN_MspInit+0xd4>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0308 	and.w	r3, r3, #8
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000208:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800020c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	4619      	mov	r1, r3
 800021c:	481c      	ldr	r0, [pc, #112]	@ (8000290 <HAL_CAN_MspInit+0xd8>)
 800021e:	f001 f985 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	4619      	mov	r1, r3
 8000236:	4816      	ldr	r0, [pc, #88]	@ (8000290 <HAL_CAN_MspInit+0xd8>)
 8000238:	f001 f978 	bl	800152c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800023c:	4b15      	ldr	r3, [pc, #84]	@ (8000294 <HAL_CAN_MspInit+0xdc>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	627b      	str	r3, [r7, #36]	@ 0x24
 8000242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000244:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000248:	627b      	str	r3, [r7, #36]	@ 0x24
 800024a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800024c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000250:	627b      	str	r3, [r7, #36]	@ 0x24
 8000252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000254:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000258:	627b      	str	r3, [r7, #36]	@ 0x24
 800025a:	4a0e      	ldr	r2, [pc, #56]	@ (8000294 <HAL_CAN_MspInit+0xdc>)
 800025c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800025e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2105      	movs	r1, #5
 8000264:	2013      	movs	r0, #19
 8000266:	f001 f884 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800026a:	2013      	movs	r0, #19
 800026c:	f001 f89d 	bl	80013aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	2105      	movs	r1, #5
 8000274:	2014      	movs	r0, #20
 8000276:	f001 f87c 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800027a:	2014      	movs	r0, #20
 800027c:	f001 f895 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000280:	bf00      	nop
 8000282:	3728      	adds	r7, #40	@ 0x28
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40006400 	.word	0x40006400
 800028c:	40021000 	.word	0x40021000
 8000290:	40010c00 	.word	0x40010c00
 8000294:	40010000 	.word	0x40010000

08000298 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	4a06      	ldr	r2, [pc, #24]	@ (80002c0 <vApplicationGetIdleTaskMemory+0x28>)
 80002a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80002ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2280      	movs	r2, #128	@ 0x80
 80002b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	20000058 	.word	0x20000058
 80002c4:	200000ac 	.word	0x200000ac

080002c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002ce:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <MX_FREERTOS_Init+0x30>)
 80002d0:	1d3c      	adds	r4, r7, #4
 80002d2:	461d      	mov	r5, r3
 80002d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f006 f903 	bl	80064f0 <osThreadCreate>
 80002ea:	4603      	mov	r3, r0
 80002ec:	4a03      	ldr	r2, [pc, #12]	@ (80002fc <MX_FREERTOS_Init+0x34>)
 80002ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80002f0:	bf00      	nop
 80002f2:	3720      	adds	r7, #32
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bdb0      	pop	{r4, r5, r7, pc}
 80002f8:	08007924 	.word	0x08007924
 80002fc:	20000054 	.word	0x20000054

08000300 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000308:	2001      	movs	r0, #1
 800030a:	f006 f93d 	bl	8006588 <osDelay>
 800030e:	e7fb      	b.n	8000308 <StartDefaultTask+0x8>

08000310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000316:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <MX_GPIO_Init+0x58>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a13      	ldr	r2, [pc, #76]	@ (8000368 <MX_GPIO_Init+0x58>)
 800031c:	f043 0320 	orr.w	r3, r3, #32
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b11      	ldr	r3, [pc, #68]	@ (8000368 <MX_GPIO_Init+0x58>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0320 	and.w	r3, r3, #32
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b0e      	ldr	r3, [pc, #56]	@ (8000368 <MX_GPIO_Init+0x58>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a0d      	ldr	r2, [pc, #52]	@ (8000368 <MX_GPIO_Init+0x58>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <MX_GPIO_Init+0x58>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000346:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <MX_GPIO_Init+0x58>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a07      	ldr	r2, [pc, #28]	@ (8000368 <MX_GPIO_Init+0x58>)
 800034c:	f043 0308 	orr.w	r3, r3, #8
 8000350:	6193      	str	r3, [r2, #24]
 8000352:	4b05      	ldr	r3, [pc, #20]	@ (8000368 <MX_GPIO_Init+0x58>)
 8000354:	699b      	ldr	r3, [r3, #24]
 8000356:	f003 0308 	and.w	r3, r3, #8
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000

0800036c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000370:	f000 fbf0 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000374:	f000 f814 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000378:	f7ff ffca 	bl	8000310 <MX_GPIO_Init>
  MX_CAN_Init();
 800037c:	f7ff fee8 	bl	8000150 <MX_CAN_Init>
  MX_TIM1_Init();
 8000380:	f000 f9a4 	bl	80006cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000384:	f000 fa1a 	bl	80007bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000388:	f000 fa42 	bl	8000810 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800038c:	f000 fa6a 	bl	8000864 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000390:	f000 fb6a 	bl	8000a68 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000394:	f7ff ff98 	bl	80002c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000398:	f006 f8a3 	bl	80064e2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <main+0x30>

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	@ 0x50
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003aa:	2228      	movs	r2, #40	@ 0x28
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f007 fa7a 	bl	80078a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b4:	f107 0314 	add.w	r3, r7, #20
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d0:	2301      	movs	r3, #1
 80003d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003de:	2301      	movs	r3, #1
 80003e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ec:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003f6:	4618      	mov	r0, r3
 80003f8:	f002 fd80 	bl	8002efc <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000402:	f000 f839 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800040a:	2302      	movs	r3, #2
 800040c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000416:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800041c:	f107 0314 	add.w	r3, r7, #20
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f002 ffec 	bl	8003400 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800042e:	f000 f823 	bl	8000478 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000432:	2310      	movs	r3, #16
 8000434:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	4618      	mov	r0, r3
 800043e:	f003 f99d 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000448:	f000 f816 	bl	8000478 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3750      	adds	r7, #80	@ 0x50
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a04      	ldr	r2, [pc, #16]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d101      	bne.n	800046a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000466:	f000 fb8b 	bl	8000b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40000800 	.word	0x40000800

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <HAL_MspInit+0x68>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a17      	ldr	r2, [pc, #92]	@ (80004ec <HAL_MspInit+0x68>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <HAL_MspInit+0x68>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <HAL_MspInit+0x68>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <HAL_MspInit+0x68>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <HAL_MspInit+0x68>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	210f      	movs	r1, #15
 80004be:	f06f 0001 	mvn.w	r0, #1
 80004c2:	f000 ff56 	bl	8001372 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <HAL_MspInit+0x6c>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <HAL_MspInit+0x6c>)
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	3710      	adds	r7, #16
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010000 	.word	0x40010000

080004f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000500:	2300      	movs	r3, #0
 8000502:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000504:	2300      	movs	r3, #0
 8000506:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800050a:	4b34      	ldr	r3, [pc, #208]	@ (80005dc <HAL_InitTick+0xe8>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a33      	ldr	r2, [pc, #204]	@ (80005dc <HAL_InitTick+0xe8>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b31      	ldr	r3, [pc, #196]	@ (80005dc <HAL_InitTick+0xe8>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000522:	f107 0210 	add.w	r2, r7, #16
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4611      	mov	r1, r2
 800052c:	4618      	mov	r0, r3
 800052e:	f003 f8d7 	bl	80036e0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000532:	6a3b      	ldr	r3, [r7, #32]
 8000534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000538:	2b00      	cmp	r3, #0
 800053a:	d103      	bne.n	8000544 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800053c:	f003 f8a8 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8000540:	6378      	str	r0, [r7, #52]	@ 0x34
 8000542:	e004      	b.n	800054e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000544:	f003 f8a4 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8000548:	4603      	mov	r3, r0
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800054e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000550:	4a23      	ldr	r2, [pc, #140]	@ (80005e0 <HAL_InitTick+0xec>)
 8000552:	fba2 2303 	umull	r2, r3, r2, r3
 8000556:	0c9b      	lsrs	r3, r3, #18
 8000558:	3b01      	subs	r3, #1
 800055a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800055c:	4b21      	ldr	r3, [pc, #132]	@ (80005e4 <HAL_InitTick+0xf0>)
 800055e:	4a22      	ldr	r2, [pc, #136]	@ (80005e8 <HAL_InitTick+0xf4>)
 8000560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000562:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <HAL_InitTick+0xf0>)
 8000564:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000568:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800056a:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <HAL_InitTick+0xf0>)
 800056c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800056e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000570:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <HAL_InitTick+0xf0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000576:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <HAL_InitTick+0xf0>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <HAL_InitTick+0xf0>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000582:	4818      	ldr	r0, [pc, #96]	@ (80005e4 <HAL_InitTick+0xf0>)
 8000584:	f003 f9b0 	bl	80038e8 <HAL_TIM_Base_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800058e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000592:	2b00      	cmp	r3, #0
 8000594:	d11b      	bne.n	80005ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000596:	4813      	ldr	r0, [pc, #76]	@ (80005e4 <HAL_InitTick+0xf0>)
 8000598:	f003 f9f6 	bl	8003988 <HAL_TIM_Base_Start_IT>
 800059c:	4603      	mov	r3, r0
 800059e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d111      	bne.n	80005ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005aa:	201e      	movs	r0, #30
 80005ac:	f000 fefd 	bl	80013aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b0f      	cmp	r3, #15
 80005b4:	d808      	bhi.n	80005c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005b6:	2200      	movs	r2, #0
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	201e      	movs	r0, #30
 80005bc:	f000 fed9 	bl	8001372 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c0:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <HAL_InitTick+0xf8>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
 80005c6:	e002      	b.n	80005ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3738      	adds	r7, #56	@ 0x38
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40021000 	.word	0x40021000
 80005e0:	431bde83 	.word	0x431bde83
 80005e4:	200002ac 	.word	0x200002ac
 80005e8:	40000800 	.word	0x40000800
 80005ec:	20000004 	.word	0x20000004

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <NMI_Handler+0x4>

080005f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <MemManage_Handler+0x4>

08000608 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <UsageFault_Handler+0x4>

08000618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000628:	4803      	ldr	r0, [pc, #12]	@ (8000638 <USB_HP_CAN1_TX_IRQHandler+0x14>)
 800062a:	f000 fbc0 	bl	8000dae <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800062e:	4803      	ldr	r0, [pc, #12]	@ (800063c <USB_HP_CAN1_TX_IRQHandler+0x18>)
 8000630:	f001 f9f6 	bl	8001a20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	2000002c 	.word	0x2000002c
 800063c:	20000414 	.word	0x20000414

08000640 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8000646:	f000 fbb2 	bl	8000dae <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800064a:	4803      	ldr	r0, [pc, #12]	@ (8000658 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 800064c:	f001 f9e8 	bl	8001a20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	2000002c 	.word	0x2000002c
 8000658:	20000414 	.word	0x20000414

0800065c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000660:	4802      	ldr	r0, [pc, #8]	@ (800066c <TIM1_UP_IRQHandler+0x10>)
 8000662:	f003 f9e3 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200002f4 	.word	0x200002f4

08000670 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000674:	4802      	ldr	r0, [pc, #8]	@ (8000680 <TIM4_IRQHandler+0x10>)
 8000676:	f003 f9d9 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200002ac 	.word	0x200002ac

08000684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000688:	4802      	ldr	r0, [pc, #8]	@ (8000694 <USART1_IRQHandler+0x10>)
 800068a:	f003 fd6f 	bl	800416c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000033c 	.word	0x2000033c

08000698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <USART2_IRQHandler+0x10>)
 800069e:	f003 fd65 	bl	800416c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000384 	.word	0x20000384

080006ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80006b0:	4802      	ldr	r0, [pc, #8]	@ (80006bc <USART3_IRQHandler+0x10>)
 80006b2:	f003 fd5b 	bl	800416c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200003cc 	.word	0x200003cc

080006c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <MX_TIM1_Init+0x9c>)
 80006ea:	4a20      	ldr	r2, [pc, #128]	@ (800076c <MX_TIM1_Init+0xa0>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_TIM1_Init+0x9c>)
 80006f0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80006f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000768 <MX_TIM1_Init+0x9c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_TIM1_Init+0x9c>)
 80006fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_TIM1_Init+0x9c>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_TIM1_Init+0x9c>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_TIM1_Init+0x9c>)
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000716:	4814      	ldr	r0, [pc, #80]	@ (8000768 <MX_TIM1_Init+0x9c>)
 8000718:	f003 f8e6 	bl	80038e8 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000722:	f7ff fea9 	bl	8000478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_TIM1_Init+0x9c>)
 8000734:	f003 fa6a 	bl	8003c0c <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800073e:	f7ff fe9b 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_TIM1_Init+0x9c>)
 8000750:	f003 fc4c 	bl	8003fec <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800075a:	f7ff fe8d 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200002f4 	.word	0x200002f4
 800076c:	40012c00 	.word	0x40012c00

08000770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <HAL_TIM_Base_MspInit+0x44>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d113      	bne.n	80007aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <HAL_TIM_Base_MspInit+0x48>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <HAL_TIM_Base_MspInit+0x48>)
 8000788:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800078c:	6193      	str	r3, [r2, #24]
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_TIM_Base_MspInit+0x48>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2105      	movs	r1, #5
 800079e:	2019      	movs	r0, #25
 80007a0:	f000 fde7 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007a4:	2019      	movs	r0, #25
 80007a6:	f000 fe00 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40012c00 	.word	0x40012c00
 80007b8:	40021000 	.word	0x40021000

080007bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART1_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART1_UART_Init+0x4c>)
 80007f4:	f003 fc6a 	bl	80040cc <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f7ff fe3b 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000033c 	.word	0x2000033c
 800080c:	40013800 	.word	0x40013800

08000810 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f003 fc40 	bl	80040cc <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f7ff fe11 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000384 	.word	0x20000384
 8000860:	40004400 	.word	0x40004400

08000864 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 800086a:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_USART3_UART_Init+0x50>)
 800086c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USART3_UART_Init+0x4c>)
 800089c:	f003 fc16 	bl	80040cc <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008a6:	f7ff fde7 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200003cc 	.word	0x200003cc
 80008b4:	40004800 	.word	0x40004800

080008b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a5f      	ldr	r2, [pc, #380]	@ (8000a50 <HAL_UART_MspInit+0x198>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d13a      	bne.n	800094e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a5d      	ldr	r2, [pc, #372]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b58      	ldr	r3, [pc, #352]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a57      	ldr	r2, [pc, #348]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b55      	ldr	r3, [pc, #340]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	4619      	mov	r1, r3
 800091c:	484e      	ldr	r0, [pc, #312]	@ (8000a58 <HAL_UART_MspInit+0x1a0>)
 800091e:	f000 fe05 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4619      	mov	r1, r3
 8000936:	4848      	ldr	r0, [pc, #288]	@ (8000a58 <HAL_UART_MspInit+0x1a0>)
 8000938:	f000 fdf8 	bl	800152c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2105      	movs	r1, #5
 8000940:	2025      	movs	r0, #37	@ 0x25
 8000942:	f000 fd16 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000946:	2025      	movs	r0, #37	@ 0x25
 8000948:	f000 fd2f 	bl	80013aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800094c:	e07c      	b.n	8000a48 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <HAL_UART_MspInit+0x1a4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d138      	bne.n	80009ca <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000958:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 800095e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000962:	61d3      	str	r3, [r2, #28]
 8000964:	4b3b      	ldr	r3, [pc, #236]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 8000966:	69db      	ldr	r3, [r3, #28]
 8000968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000988:	2304      	movs	r3, #4
 800098a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4619      	mov	r1, r3
 800099a:	482f      	ldr	r0, [pc, #188]	@ (8000a58 <HAL_UART_MspInit+0x1a0>)
 800099c:	f000 fdc6 	bl	800152c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009a0:	2308      	movs	r3, #8
 80009a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	4619      	mov	r1, r3
 80009b2:	4829      	ldr	r0, [pc, #164]	@ (8000a58 <HAL_UART_MspInit+0x1a0>)
 80009b4:	f000 fdba 	bl	800152c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2105      	movs	r1, #5
 80009bc:	2026      	movs	r0, #38	@ 0x26
 80009be:	f000 fcd8 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	2026      	movs	r0, #38	@ 0x26
 80009c4:	f000 fcf1 	bl	80013aa <HAL_NVIC_EnableIRQ>
}
 80009c8:	e03e      	b.n	8000a48 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a24      	ldr	r2, [pc, #144]	@ (8000a60 <HAL_UART_MspInit+0x1a8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d139      	bne.n	8000a48 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80009da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009de:	61d3      	str	r3, [r2, #28]
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ec:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a18      	ldr	r2, [pc, #96]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80009f2:	f043 0308 	orr.w	r3, r3, #8
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_UART_MspInit+0x19c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0308 	and.w	r3, r3, #8
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0320 	add.w	r3, r7, #32
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <HAL_UART_MspInit+0x1ac>)
 8000a1a:	f000 fd87 	bl	800152c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0320 	add.w	r3, r7, #32
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <HAL_UART_MspInit+0x1ac>)
 8000a34:	f000 fd7a 	bl	800152c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2105      	movs	r1, #5
 8000a3c:	2027      	movs	r0, #39	@ 0x27
 8000a3e:	f000 fc98 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a42:	2027      	movs	r0, #39	@ 0x27
 8000a44:	f000 fcb1 	bl	80013aa <HAL_NVIC_EnableIRQ>
}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	@ 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40013800 	.word	0x40013800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010800 	.word	0x40010800
 8000a5c:	40004400 	.word	0x40004400
 8000a60:	40004800 	.word	0x40004800
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <MX_USB_PCD_Init+0x40>)
 8000a70:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_USB_PCD_Init+0x3c>)
 8000a92:	f000 fecf 	bl	8001834 <HAL_PCD_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000a9c:	f7ff fcec 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000414 	.word	0x20000414
 8000aa8:	40005c00 	.word	0x40005c00

08000aac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a11      	ldr	r2, [pc, #68]	@ (8000b00 <HAL_PCD_MspInit+0x54>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d11b      	bne.n	8000af6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_PCD_MspInit+0x58>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_PCD_MspInit+0x58>)
 8000ac4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_PCD_MspInit+0x58>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2013      	movs	r0, #19
 8000adc:	f000 fc49 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000ae0:	2013      	movs	r0, #19
 8000ae2:	f000 fc62 	bl	80013aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2014      	movs	r0, #20
 8000aec:	f000 fc41 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000af0:	2014      	movs	r0, #20
 8000af2:	f000 fc5a 	bl	80013aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40005c00 	.word	0x40005c00
 8000b04:	40021000 	.word	0x40021000

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff fdda 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b0e:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b24:	4c09      	ldr	r4, [pc, #36]	@ (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f006 fec1 	bl	80078b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fc19 	bl	800036c <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b44:	0800797c 	.word	0x0800797c
  ldr r2, =_sbss
 8000b48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b4c:	20001444 	.word	0x20001444

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 fbf9 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	200f      	movs	r0, #15
 8000b6c:	f7ff fcc2 	bl	80004f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fc88 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200006ec 	.word	0x200006ec

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	@ (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	200006ec 	.word	0x200006ec

08000bb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d101      	bne.n	8000bca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0ed      	b.n	8000da6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff faee 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bec:	f7ff ffda 	bl	8000ba4 <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf2:	e012      	b.n	8000c1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf4:	f7ff ffd6 	bl	8000ba4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d90b      	bls.n	8000c1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0c5      	b.n	8000da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e5      	beq.n	8000bf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0202 	bic.w	r2, r2, #2
 8000c36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c38:	f7ff ffb4 	bl	8000ba4 <HAL_GetTick>
 8000c3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c3e:	e012      	b.n	8000c66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c40:	f7ff ffb0 	bl	8000ba4 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b0a      	cmp	r3, #10
 8000c4c:	d90b      	bls.n	8000c66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e09f      	b.n	8000da6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e5      	bne.n	8000c40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7e1b      	ldrb	r3, [r3, #24]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d108      	bne.n	8000c8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e007      	b.n	8000c9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7e5b      	ldrb	r3, [r3, #25]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d108      	bne.n	8000cb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e007      	b.n	8000cc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7e9b      	ldrb	r3, [r3, #26]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d108      	bne.n	8000ce2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0220 	orr.w	r2, r2, #32
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e007      	b.n	8000cf2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0220 	bic.w	r2, r2, #32
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7edb      	ldrb	r3, [r3, #27]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d108      	bne.n	8000d0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 0210 	bic.w	r2, r2, #16
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e007      	b.n	8000d1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0210 	orr.w	r2, r2, #16
 8000d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7f1b      	ldrb	r3, [r3, #28]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d108      	bne.n	8000d36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0208 	orr.w	r2, r2, #8
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	e007      	b.n	8000d46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0208 	bic.w	r2, r2, #8
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	7f5b      	ldrb	r3, [r3, #29]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d108      	bne.n	8000d60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0204 	orr.w	r2, r2, #4
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e007      	b.n	8000d70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0204 	bic.w	r2, r2, #4
 8000d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	695b      	ldr	r3, [r3, #20]
 8000d84:	ea42 0103 	orr.w	r1, r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b08a      	sub	sp, #40	@ 0x28
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d07c      	beq.n	8000eee <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d023      	beq.n	8000e46 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2201      	movs	r2, #1
 8000e04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f983 	bl	800111c <HAL_CAN_TxMailbox0CompleteCallback>
 8000e16:	e016      	b.n	8000e46 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d004      	beq.n	8000e2c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e2a:	e00c      	b.n	8000e46 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e3e:	e002      	b.n	8000e46 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f986 	bl	8001152 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d024      	beq.n	8000e9a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f962 	bl	800112e <HAL_CAN_TxMailbox1CompleteCallback>
 8000e6a:	e016      	b.n	8000e9a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7e:	e00c      	b.n	8000e9a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e92:	e002      	b.n	8000e9a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f965 	bl	8001164 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d024      	beq.n	8000eee <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f941 	bl	8001140 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ebe:	e016      	b.n	8000eee <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed2:	e00c      	b.n	8000eee <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee6:	e002      	b.n	8000eee <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f944 	bl	8001176 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00c      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d007      	beq.n	8000f12 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2210      	movs	r2, #16
 8000f10:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00b      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f933 	bl	800119a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f34:	6a3b      	ldr	r3, [r7, #32]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d009      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d002      	beq.n	8000f52 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f91b 	bl	8001188 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00c      	beq.n	8000f76 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2210      	movs	r2, #16
 8000f74:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2208      	movs	r2, #8
 8000f90:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f913 	bl	80011be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d009      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f8fb 	bl	80011ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2210      	movs	r2, #16
 8000fd0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f8fc 	bl	80011d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f8f4 	bl	80011e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d07b      	beq.n	80010fc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b00      	cmp	r3, #0
 800100c:	d072      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001068:	2b00      	cmp	r3, #0
 800106a:	d043      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001072:	2b00      	cmp	r3, #0
 8001074:	d03e      	beq.n	80010f4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800107c:	2b60      	cmp	r3, #96	@ 0x60
 800107e:	d02b      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x32a>
 8001080:	2b60      	cmp	r3, #96	@ 0x60
 8001082:	d82e      	bhi.n	80010e2 <HAL_CAN_IRQHandler+0x334>
 8001084:	2b50      	cmp	r3, #80	@ 0x50
 8001086:	d022      	beq.n	80010ce <HAL_CAN_IRQHandler+0x320>
 8001088:	2b50      	cmp	r3, #80	@ 0x50
 800108a:	d82a      	bhi.n	80010e2 <HAL_CAN_IRQHandler+0x334>
 800108c:	2b40      	cmp	r3, #64	@ 0x40
 800108e:	d019      	beq.n	80010c4 <HAL_CAN_IRQHandler+0x316>
 8001090:	2b40      	cmp	r3, #64	@ 0x40
 8001092:	d826      	bhi.n	80010e2 <HAL_CAN_IRQHandler+0x334>
 8001094:	2b30      	cmp	r3, #48	@ 0x30
 8001096:	d010      	beq.n	80010ba <HAL_CAN_IRQHandler+0x30c>
 8001098:	2b30      	cmp	r3, #48	@ 0x30
 800109a:	d822      	bhi.n	80010e2 <HAL_CAN_IRQHandler+0x334>
 800109c:	2b10      	cmp	r3, #16
 800109e:	d002      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x2f8>
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	d005      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010a4:	e01d      	b.n	80010e2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010ae:	e019      	b.n	80010e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010b8:	e014      	b.n	80010e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010c2:	e00f      	b.n	80010e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010cc:	e00a      	b.n	80010e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010d6:	e005      	b.n	80010e4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010e0:	e000      	b.n	80010e4 <HAL_CAN_IRQHandler+0x336>
            break;
 80010e2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	699a      	ldr	r2, [r3, #24]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80010f2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2204      	movs	r2, #4
 80010fa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f870 	bl	80011f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	@ 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800123a:	4a04      	ldr	r2, [pc, #16]	@ (800124c <__NVIC_SetPriorityGrouping+0x44>)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4906      	ldr	r1, [pc, #24]	@ (80012a0 <__NVIC_EnableIRQ+0x34>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff4f 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001384:	f7ff ff64 	bl	8001250 <__NVIC_GetPriorityGrouping>
 8001388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	6978      	ldr	r0, [r7, #20]
 8001390:	f7ff ffb2 	bl	80012f8 <NVIC_EncodePriority>
 8001394:	4602      	mov	r2, r0
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff81 	bl	80012a4 <__NVIC_SetPriority>
}
 80013a2:	bf00      	nop
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff57 	bl	800126c <__NVIC_EnableIRQ>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d008      	beq.n	80013f0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2204      	movs	r2, #4
 80013e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e020      	b.n	8001432 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 020e 	bic.w	r2, r2, #14
 80013fe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001430:	7bfb      	ldrb	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d005      	beq.n	8001460 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2204      	movs	r2, #4
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e051      	b.n	8001504 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 020e 	bic.w	r2, r2, #14
 800146e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <HAL_DMA_Abort_IT+0xd4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d029      	beq.n	80014de <HAL_DMA_Abort_IT+0xa2>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_DMA_Abort_IT+0xd8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d022      	beq.n	80014da <HAL_DMA_Abort_IT+0x9e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a1f      	ldr	r2, [pc, #124]	@ (8001518 <HAL_DMA_Abort_IT+0xdc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01a      	beq.n	80014d4 <HAL_DMA_Abort_IT+0x98>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1e      	ldr	r2, [pc, #120]	@ (800151c <HAL_DMA_Abort_IT+0xe0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d012      	beq.n	80014ce <HAL_DMA_Abort_IT+0x92>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <HAL_DMA_Abort_IT+0xe4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00a      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x8c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <HAL_DMA_Abort_IT+0xe8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d102      	bne.n	80014c2 <HAL_DMA_Abort_IT+0x86>
 80014bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014c0:	e00e      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014c6:	e00b      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014cc:	e008      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d2:	e005      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d8:	e002      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014da:	2310      	movs	r3, #16
 80014dc:	e000      	b.n	80014e0 <HAL_DMA_Abort_IT+0xa4>
 80014de:	2301      	movs	r3, #1
 80014e0:	4a11      	ldr	r2, [pc, #68]	@ (8001528 <HAL_DMA_Abort_IT+0xec>)
 80014e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
    } 
  }
  return status;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020008 	.word	0x40020008
 8001514:	4002001c 	.word	0x4002001c
 8001518:	40020030 	.word	0x40020030
 800151c:	40020044 	.word	0x40020044
 8001520:	40020058 	.word	0x40020058
 8001524:	4002006c 	.word	0x4002006c
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b08b      	sub	sp, #44	@ 0x2c
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e169      	b.n	8001814 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001540:	2201      	movs	r2, #1
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 8158 	bne.w	800180e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a9a      	ldr	r2, [pc, #616]	@ (80017cc <HAL_GPIO_Init+0x2a0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d05e      	beq.n	8001626 <HAL_GPIO_Init+0xfa>
 8001568:	4a98      	ldr	r2, [pc, #608]	@ (80017cc <HAL_GPIO_Init+0x2a0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d875      	bhi.n	800165a <HAL_GPIO_Init+0x12e>
 800156e:	4a98      	ldr	r2, [pc, #608]	@ (80017d0 <HAL_GPIO_Init+0x2a4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d058      	beq.n	8001626 <HAL_GPIO_Init+0xfa>
 8001574:	4a96      	ldr	r2, [pc, #600]	@ (80017d0 <HAL_GPIO_Init+0x2a4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d86f      	bhi.n	800165a <HAL_GPIO_Init+0x12e>
 800157a:	4a96      	ldr	r2, [pc, #600]	@ (80017d4 <HAL_GPIO_Init+0x2a8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d052      	beq.n	8001626 <HAL_GPIO_Init+0xfa>
 8001580:	4a94      	ldr	r2, [pc, #592]	@ (80017d4 <HAL_GPIO_Init+0x2a8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d869      	bhi.n	800165a <HAL_GPIO_Init+0x12e>
 8001586:	4a94      	ldr	r2, [pc, #592]	@ (80017d8 <HAL_GPIO_Init+0x2ac>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d04c      	beq.n	8001626 <HAL_GPIO_Init+0xfa>
 800158c:	4a92      	ldr	r2, [pc, #584]	@ (80017d8 <HAL_GPIO_Init+0x2ac>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d863      	bhi.n	800165a <HAL_GPIO_Init+0x12e>
 8001592:	4a92      	ldr	r2, [pc, #584]	@ (80017dc <HAL_GPIO_Init+0x2b0>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d046      	beq.n	8001626 <HAL_GPIO_Init+0xfa>
 8001598:	4a90      	ldr	r2, [pc, #576]	@ (80017dc <HAL_GPIO_Init+0x2b0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d85d      	bhi.n	800165a <HAL_GPIO_Init+0x12e>
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d82a      	bhi.n	80015f8 <HAL_GPIO_Init+0xcc>
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d859      	bhi.n	800165a <HAL_GPIO_Init+0x12e>
 80015a6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ac <HAL_GPIO_Init+0x80>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	08001627 	.word	0x08001627
 80015b0:	08001601 	.word	0x08001601
 80015b4:	08001613 	.word	0x08001613
 80015b8:	08001655 	.word	0x08001655
 80015bc:	0800165b 	.word	0x0800165b
 80015c0:	0800165b 	.word	0x0800165b
 80015c4:	0800165b 	.word	0x0800165b
 80015c8:	0800165b 	.word	0x0800165b
 80015cc:	0800165b 	.word	0x0800165b
 80015d0:	0800165b 	.word	0x0800165b
 80015d4:	0800165b 	.word	0x0800165b
 80015d8:	0800165b 	.word	0x0800165b
 80015dc:	0800165b 	.word	0x0800165b
 80015e0:	0800165b 	.word	0x0800165b
 80015e4:	0800165b 	.word	0x0800165b
 80015e8:	0800165b 	.word	0x0800165b
 80015ec:	0800165b 	.word	0x0800165b
 80015f0:	08001609 	.word	0x08001609
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	4a79      	ldr	r2, [pc, #484]	@ (80017e0 <HAL_GPIO_Init+0x2b4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015fe:	e02c      	b.n	800165a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	623b      	str	r3, [r7, #32]
          break;
 8001606:	e029      	b.n	800165c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	3304      	adds	r3, #4
 800160e:	623b      	str	r3, [r7, #32]
          break;
 8001610:	e024      	b.n	800165c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	3308      	adds	r3, #8
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e01f      	b.n	800165c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	330c      	adds	r3, #12
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e01a      	b.n	800165c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162e:	2304      	movs	r3, #4
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e013      	b.n	800165c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d105      	bne.n	8001648 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800163c:	2308      	movs	r3, #8
 800163e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	611a      	str	r2, [r3, #16]
          break;
 8001646:	e009      	b.n	800165c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001648:	2308      	movs	r3, #8
 800164a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	615a      	str	r2, [r3, #20]
          break;
 8001652:	e003      	b.n	800165c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x130>
          break;
 800165a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2bff      	cmp	r3, #255	@ 0xff
 8001660:	d801      	bhi.n	8001666 <HAL_GPIO_Init+0x13a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	e001      	b.n	800166a <HAL_GPIO_Init+0x13e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3304      	adds	r3, #4
 800166a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2bff      	cmp	r3, #255	@ 0xff
 8001670:	d802      	bhi.n	8001678 <HAL_GPIO_Init+0x14c>
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	e002      	b.n	800167e <HAL_GPIO_Init+0x152>
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	3b08      	subs	r3, #8
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	210f      	movs	r1, #15
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	401a      	ands	r2, r3
 8001690:	6a39      	ldr	r1, [r7, #32]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	431a      	orrs	r2, r3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80b1 	beq.w	800180e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016ac:	4b4d      	ldr	r3, [pc, #308]	@ (80017e4 <HAL_GPIO_Init+0x2b8>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <HAL_GPIO_Init+0x2b8>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b4a      	ldr	r3, [pc, #296]	@ (80017e4 <HAL_GPIO_Init+0x2b8>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c4:	4a48      	ldr	r2, [pc, #288]	@ (80017e8 <HAL_GPIO_Init+0x2bc>)
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a40      	ldr	r2, [pc, #256]	@ (80017ec <HAL_GPIO_Init+0x2c0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d013      	beq.n	8001718 <HAL_GPIO_Init+0x1ec>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3f      	ldr	r2, [pc, #252]	@ (80017f0 <HAL_GPIO_Init+0x2c4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d00d      	beq.n	8001714 <HAL_GPIO_Init+0x1e8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a3e      	ldr	r2, [pc, #248]	@ (80017f4 <HAL_GPIO_Init+0x2c8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d007      	beq.n	8001710 <HAL_GPIO_Init+0x1e4>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3d      	ldr	r2, [pc, #244]	@ (80017f8 <HAL_GPIO_Init+0x2cc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d101      	bne.n	800170c <HAL_GPIO_Init+0x1e0>
 8001708:	2303      	movs	r3, #3
 800170a:	e006      	b.n	800171a <HAL_GPIO_Init+0x1ee>
 800170c:	2304      	movs	r3, #4
 800170e:	e004      	b.n	800171a <HAL_GPIO_Init+0x1ee>
 8001710:	2302      	movs	r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x1ee>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_GPIO_Init+0x1ee>
 8001718:	2300      	movs	r3, #0
 800171a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171c:	f002 0203 	and.w	r2, r2, #3
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	4093      	lsls	r3, r2
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800172a:	492f      	ldr	r1, [pc, #188]	@ (80017e8 <HAL_GPIO_Init+0x2bc>)
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001744:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	492c      	ldr	r1, [pc, #176]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001752:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	4928      	ldr	r1, [pc, #160]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 800175c:	4013      	ands	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800176c:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	4922      	ldr	r1, [pc, #136]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	491e      	ldr	r1, [pc, #120]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 8001784:	4013      	ands	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4918      	ldr	r1, [pc, #96]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4914      	ldr	r1, [pc, #80]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d021      	beq.n	8001800 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	490e      	ldr	r1, [pc, #56]	@ (80017fc <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
 80017c8:	e021      	b.n	800180e <HAL_GPIO_Init+0x2e2>
 80017ca:	bf00      	nop
 80017cc:	10320000 	.word	0x10320000
 80017d0:	10310000 	.word	0x10310000
 80017d4:	10220000 	.word	0x10220000
 80017d8:	10210000 	.word	0x10210000
 80017dc:	10120000 	.word	0x10120000
 80017e0:	10110000 	.word	0x10110000
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010000 	.word	0x40010000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40011400 	.word	0x40011400
 80017fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <HAL_GPIO_Init+0x304>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	43db      	mvns	r3, r3
 8001808:	4909      	ldr	r1, [pc, #36]	@ (8001830 <HAL_GPIO_Init+0x304>)
 800180a:	4013      	ands	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	fa22 f303 	lsr.w	r3, r2, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	f47f ae8e 	bne.w	8001540 <HAL_GPIO_Init+0x14>
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	372c      	adds	r7, #44	@ 0x2c
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e8      	b.n	8001a18 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff f926 	bl	8000aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f003 f969 	bl	8004b4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001882:	f003 f955 	bl	8004b30 <USB_CoreInit>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0bf      	b.n	8001a18 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 f96d 	bl	8004b7e <USB_SetCurrentMode>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0b0      	b.n	8001a18 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e03e      	b.n	800193a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3311      	adds	r3, #17
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	3310      	adds	r3, #16
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	440b      	add	r3, r1
 80018f2:	3313      	adds	r3, #19
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	3320      	adds	r3, #32
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3324      	adds	r3, #36	@ 0x24
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	3301      	adds	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3bb      	bcc.n	80018bc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e044      	b.n	80019d4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001976:	7bfa      	ldrb	r2, [r7, #15]
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	3301      	adds	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	791b      	ldrb	r3, [r3, #4]
 80019d8:	7bfa      	ldrb	r2, [r7, #15]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d3b5      	bcc.n	800194a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3304      	adds	r3, #4
 80019e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e8:	f003 f8d5 	bl	8004b96 <USB_DevInit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2202      	movs	r2, #2
 80019f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00c      	b.n	8001a18 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fca1 	bl	8006358 <USB_DevDisconnect>

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fc9d 	bl	800636c <USB_ReadInterrupts>
 8001a32:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f985 	bl	8001d4e <PCD_EP_ISR_Handler>

    return;
 8001a44:	e119      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d013      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a62:	b292      	uxth	r2, r2
 8001a64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f931 	bl	8001cd0 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f948 	bl	8001d06 <HAL_PCD_SetAddress>

    return;
 8001a76:	e100      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a9a:	e0ee      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001abe:	e0dc      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d027      	beq.n	8001b1a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0204 	bic.w	r2, r2, #4
 8001adc:	b292      	uxth	r2, r2
 8001ade:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0208 	bic.w	r2, r2, #8
 8001af4:	b292      	uxth	r2, r2
 8001af6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8fa 	bl	8001cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b12:	b292      	uxth	r2, r2
 8001b14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001b18:	e0af      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 8083 	beq.w	8001c2c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	77fb      	strb	r3, [r7, #31]
 8001b2a:	e010      	b.n	8001b4e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	441a      	add	r2, r3
 8001b38:	7ffb      	ldrb	r3, [r7, #31]
 8001b3a:	8812      	ldrh	r2, [r2, #0]
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	3320      	adds	r3, #32
 8001b42:	443b      	add	r3, r7
 8001b44:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001b48:	7ffb      	ldrb	r3, [r7, #31]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	77fb      	strb	r3, [r7, #31]
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b07      	cmp	r3, #7
 8001b52:	d9eb      	bls.n	8001b2c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	b292      	uxth	r2, r2
 8001b68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0201 	bic.w	r2, r2, #1
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001b84:	bf00      	nop
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f6      	beq.n	8001b86 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001baa:	b292      	uxth	r2, r2
 8001bac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	77fb      	strb	r3, [r7, #31]
 8001bb4:	e00f      	b.n	8001bd6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001bb6:	7ffb      	ldrb	r3, [r7, #31]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	7ffa      	ldrb	r2, [r7, #31]
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	440a      	add	r2, r1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	3320      	adds	r3, #32
 8001bc8:	443b      	add	r3, r7
 8001bca:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001bce:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001bd0:	7ffb      	ldrb	r3, [r7, #31]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	77fb      	strb	r3, [r7, #31]
 8001bd6:	7ffb      	ldrb	r3, [r7, #31]
 8001bd8:	2b07      	cmp	r3, #7
 8001bda:	d9ec      	bls.n	8001bb6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0208 	orr.w	r2, r2, #8
 8001bee:	b292      	uxth	r2, r2
 8001bf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c06:	b292      	uxth	r2, r2
 8001c08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0204 	orr.w	r2, r2, #4
 8001c1e:	b292      	uxth	r2, r2
 8001c20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f85c 	bl	8001ce2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c2a:	e026      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00f      	beq.n	8001c56 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f835 	bl	8001cbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001c54:	e011      	b.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00c      	beq.n	8001c7a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c72:	b292      	uxth	r2, r2
 8001c74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c78:	bf00      	nop
  }
}
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_PCD_SetAddress+0x1a>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e012      	b.n	8001d46 <HAL_PCD_SetAddress+0x40>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f004 fafb 	bl	8006332 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b096      	sub	sp, #88	@ 0x58
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d56:	e3bb      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001d72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8175 	bne.w	8002066 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d14e      	bne.n	8001e26 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d98:	81fb      	strh	r3, [r7, #14]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3310      	adds	r3, #16
 8001db0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6812      	ldr	r2, [r2, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ddc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	441a      	add	r2, r3
 8001de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dec:	2100      	movs	r1, #0
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff ff51 	bl	8001c96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7b5b      	ldrb	r3, [r3, #13]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8368 	beq.w	80024d0 <PCD_EP_ISR_Handler+0x782>
 8001e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8363 	bne.w	80024d0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b5b      	ldrb	r3, [r3, #13]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	735a      	strb	r2, [r3, #13]
 8001e24:	e354      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e2c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d034      	beq.n	8001eae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	3306      	adds	r3, #6
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f004 fac7 	bl	8006416 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001e94:	4013      	ands	r3, r2
 8001e96:	823b      	strh	r3, [r7, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	8a3a      	ldrh	r2, [r7, #16]
 8001e9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ff00 	bl	8001cac <HAL_PCD_SetupStageCallback>
 8001eac:	e310      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f280 830c 	bge.w	80024d0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	83fb      	strh	r3, [r7, #30]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	8bfa      	ldrh	r2, [r7, #30]
 8001ece:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001ed2:	b292      	uxth	r2, r2
 8001ed4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3306      	adds	r3, #6
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d019      	beq.n	8001f3e <PCD_EP_ISR_Handler+0x1f0>
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f18:	6959      	ldr	r1, [r3, #20]
 8001f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f004 fa77 	bl	8006416 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	441a      	add	r2, r3
 8001f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f36:	2100      	movs	r1, #0
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fea1 	bl	8001c80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001f48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 82bd 	bne.w	80024d0 <PCD_EP_ISR_Handler+0x782>
 8001f56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f5a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8001f5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001f62:	f000 82b5 	beq.w	80024d0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	801a      	strh	r2, [r3, #0]
 8001f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f9c:	d91d      	bls.n	8001fda <PCD_EP_ISR_Handler+0x28c>
 8001f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 031f 	and.w	r3, r3, #31
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <PCD_EP_ISR_Handler+0x26a>
 8001fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	e026      	b.n	8002028 <PCD_EP_ISR_Handler+0x2da>
 8001fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10a      	bne.n	8001ff8 <PCD_EP_ISR_Handler+0x2aa>
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e017      	b.n	8002028 <PCD_EP_ISR_Handler+0x2da>
 8001ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <PCD_EP_ISR_Handler+0x2c4>
 800200c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800200e:	3301      	adds	r3, #1
 8002010:	647b      	str	r3, [r7, #68]	@ 0x44
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29a      	uxth	r2, r3
 8002018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800201a:	b29b      	uxth	r3, r3
 800201c:	029b      	lsls	r3, r3, #10
 800201e:	b29b      	uxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b29a      	uxth	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002038:	827b      	strh	r3, [r7, #18]
 800203a:	8a7b      	ldrh	r3, [r7, #18]
 800203c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002040:	827b      	strh	r3, [r7, #18]
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002048:	827b      	strh	r3, [r7, #18]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	8a7b      	ldrh	r3, [r7, #18]
 8002050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800205c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002060:	b29b      	uxth	r3, r3
 8002062:	8013      	strh	r3, [r2, #0]
 8002064:	e234      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800207a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800207e:	2b00      	cmp	r3, #0
 8002080:	f280 80fc 	bge.w	800227c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29a      	uxth	r2, r3
 8002096:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800209a:	4013      	ands	r3, r2
 800209c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80020b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020b6:	b292      	uxth	r2, r2
 80020b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80020d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020d2:	7b1b      	ldrb	r3, [r3, #12]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d125      	bne.n	8002124 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	3306      	adds	r3, #6
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002100:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002104:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8092 	beq.w	8002232 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002114:	6959      	ldr	r1, [r3, #20]
 8002116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002118:	88da      	ldrh	r2, [r3, #6]
 800211a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800211e:	f004 f97a 	bl	8006416 <USB_ReadPMA>
 8002122:	e086      	b.n	8002232 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	78db      	ldrb	r3, [r3, #3]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d10a      	bne.n	8002142 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800212c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002130:	461a      	mov	r2, r3
 8002132:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f9d9 	bl	80024ec <HAL_PCD_EP_DB_Receive>
 800213a:	4603      	mov	r3, r0
 800213c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002140:	e077      	b.n	8002232 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800217a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800217e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002182:	b29b      	uxth	r3, r3
 8002184:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d024      	beq.n	80021ea <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	3302      	adds	r3, #2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80021cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d02e      	beq.n	8002232 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021da:	6959      	ldr	r1, [r3, #20]
 80021dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021de:	891a      	ldrh	r2, [r3, #8]
 80021e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021e4:	f004 f917 	bl	8006416 <USB_ReadPMA>
 80021e8:	e023      	b.n	8002232 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	3306      	adds	r3, #6
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002212:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002216:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002224:	6959      	ldr	r1, [r3, #20]
 8002226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002228:	895a      	ldrh	r2, [r3, #10]
 800222a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800222e:	f004 f8f2 	bl	8006416 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800223a:	441a      	add	r2, r3
 800223c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800223e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002248:	441a      	add	r2, r3
 800224a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800224e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <PCD_EP_ISR_Handler+0x514>
 8002256:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800225a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	429a      	cmp	r2, r3
 8002260:	d206      	bcs.n	8002270 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fd09 	bl	8001c80 <HAL_PCD_DataOutStageCallback>
 800226e:	e005      	b.n	800227c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002276:	4618      	mov	r0, r3
 8002278:	f002 fcaa 	bl	8004bd0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800227c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8123 	beq.w	80024d0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800228a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	3310      	adds	r3, #16
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80022b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	441a      	add	r2, r3
 80022ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80022ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80022da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022dc:	78db      	ldrb	r3, [r3, #3]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	f040 80a2 	bne.w	8002428 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80022e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e6:	2200      	movs	r2, #0
 80022e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80022ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ec:	7b1b      	ldrb	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8093 	beq.w	800241a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d046      	beq.n	800238e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d126      	bne.n	8002356 <PCD_EP_ISR_Handler+0x608>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002316:	b29b      	uxth	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	4413      	add	r3, r2
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	011a      	lsls	r2, r3, #4
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	4413      	add	r3, r2
 800232a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233a:	b29a      	uxth	r2, r3
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	b29b      	uxth	r3, r3
 8002346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800234e:	b29a      	uxth	r2, r3
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e061      	b.n	800241a <PCD_EP_ISR_Handler+0x6cc>
 8002356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002358:	785b      	ldrb	r3, [r3, #1]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d15d      	bne.n	800241a <PCD_EP_ISR_Handler+0x6cc>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002372:	4413      	add	r3, r2
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	011a      	lsls	r2, r3, #4
 800237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237e:	4413      	add	r3, r2
 8002380:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	2200      	movs	r2, #0
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	e045      	b.n	800241a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d126      	bne.n	80023ea <PCD_EP_ISR_Handler+0x69c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b0:	4413      	add	r3, r2
 80023b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	011a      	lsls	r2, r3, #4
 80023ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023bc:	4413      	add	r3, r2
 80023be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80023c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	e017      	b.n	800241a <PCD_EP_ISR_Handler+0x6cc>
 80023ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d113      	bne.n	800241a <PCD_EP_ISR_Handler+0x6cc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002400:	4413      	add	r3, r2
 8002402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	011a      	lsls	r2, r3, #4
 800240a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240c:	4413      	add	r3, r2
 800240e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002416:	2200      	movs	r2, #0
 8002418:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800241a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff fc38 	bl	8001c96 <HAL_PCD_DataInStageCallback>
 8002426:	e053      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002428:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800242c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d146      	bne.n	80024c2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	3302      	adds	r3, #2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002468:	429a      	cmp	r2, r3
 800246a:	d907      	bls.n	800247c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002474:	1ad2      	subs	r2, r2, r3
 8002476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002478:	619a      	str	r2, [r3, #24]
 800247a:	e002      	b.n	8002482 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800247c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800248a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff fc00 	bl	8001c96 <HAL_PCD_DataInStageCallback>
 8002496:	e01b      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024a0:	441a      	add	r2, r3
 80024a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80024a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80024ae:	441a      	add	r2, r3
 80024b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 fb88 	bl	8004bd0 <USB_EPStartXfer>
 80024c0:	e006      	b.n	80024d0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024c6:	461a      	mov	r2, r3
 80024c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f91b 	bl	8002706 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b21b      	sxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f6ff ac3b 	blt.w	8001d58 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3758      	adds	r7, #88	@ 0x58
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d07e      	beq.n	8002602 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	3302      	adds	r3, #2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	8b7b      	ldrh	r3, [r7, #26]
 8002534:	429a      	cmp	r2, r3
 8002536:	d306      	bcc.n	8002546 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	699a      	ldr	r2, [r3, #24]
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	1ad2      	subs	r2, r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	619a      	str	r2, [r3, #24]
 8002544:	e002      	b.n	800254c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d123      	bne.n	800259c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29b      	uxth	r3, r3
 8002566:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800256a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800256e:	833b      	strh	r3, [r7, #24]
 8002570:	8b3b      	ldrh	r3, [r7, #24]
 8002572:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002576:	833b      	strh	r3, [r7, #24]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	8b3b      	ldrh	r3, [r7, #24]
 8002588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800258c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002598:	b29b      	uxth	r3, r3
 800259a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01f      	beq.n	80025e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025c0:	82fb      	strh	r3, [r7, #22]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	441a      	add	r2, r3
 80025d0:	8afb      	ldrh	r3, [r7, #22]
 80025d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80025d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80025da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025e6:	8b7b      	ldrh	r3, [r7, #26]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8087 	beq.w	80026fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6959      	ldr	r1, [r3, #20]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	891a      	ldrh	r2, [r3, #8]
 80025fa:	8b7b      	ldrh	r3, [r7, #26]
 80025fc:	f003 ff0b 	bl	8006416 <USB_ReadPMA>
 8002600:	e07c      	b.n	80026fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	3306      	adds	r3, #6
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4413      	add	r3, r2
 8002620:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	8b7b      	ldrh	r3, [r7, #26]
 8002632:	429a      	cmp	r2, r3
 8002634:	d306      	bcc.n	8002644 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	8b7b      	ldrh	r3, [r7, #26]
 800263c:	1ad2      	subs	r2, r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	619a      	str	r2, [r3, #24]
 8002642:	e002      	b.n	800264a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d123      	bne.n	800269a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266c:	83fb      	strh	r3, [r7, #30]
 800266e:	8bfb      	ldrh	r3, [r7, #30]
 8002670:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002674:	83fb      	strh	r3, [r7, #30]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	441a      	add	r2, r3
 8002684:	8bfb      	ldrh	r3, [r7, #30]
 8002686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800268a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800268e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002696:	b29b      	uxth	r3, r3
 8002698:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11f      	bne.n	80026e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026be:	83bb      	strh	r3, [r7, #28]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	441a      	add	r2, r3
 80026ce:	8bbb      	ldrh	r3, [r7, #28]
 80026d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026e4:	8b7b      	ldrh	r3, [r7, #26]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d008      	beq.n	80026fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	6959      	ldr	r1, [r3, #20]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	895a      	ldrh	r2, [r3, #10]
 80026f6:	8b7b      	ldrh	r3, [r7, #26]
 80026f8:	f003 fe8d 	bl	8006416 <USB_ReadPMA>
    }
  }

  return count;
 80026fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b0a4      	sub	sp, #144	@ 0x90
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	4613      	mov	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 81dd 	beq.w	8002ada <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002728:	b29b      	uxth	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	3302      	adds	r3, #2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002748:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002754:	429a      	cmp	r2, r3
 8002756:	d907      	bls.n	8002768 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002760:	1ad2      	subs	r2, r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	619a      	str	r2, [r3, #24]
 8002766:	e002      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 80b9 	bne.w	80028ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d126      	bne.n	80027ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	4413      	add	r3, r2
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	011a      	lsls	r2, r3, #4
 800279e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a0:	4413      	add	r3, r2
 80027a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	801a      	strh	r2, [r3, #0]
 80027b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e01a      	b.n	8002804 <HAL_PCD_EP_DB_Transmit+0xfe>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d116      	bne.n	8002804 <HAL_PCD_EP_DB_Transmit+0xfe>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	637b      	str	r3, [r7, #52]	@ 0x34
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ea:	4413      	add	r3, r2
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	011a      	lsls	r2, r3, #4
 80027f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80027fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002800:	2200      	movs	r2, #0
 8002802:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	785b      	ldrb	r3, [r3, #1]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d126      	bne.n	8002860 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	011a      	lsls	r2, r3, #4
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	4413      	add	r3, r2
 8002834:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002844:	b29a      	uxth	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002858:	b29a      	uxth	r2, r3
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	e017      	b.n	8002890 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	785b      	ldrb	r3, [r3, #1]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d113      	bne.n	8002890 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	4413      	add	r3, r2
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	011a      	lsls	r2, r3, #4
 8002880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002882:	4413      	add	r3, r2
 8002884:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	2200      	movs	r2, #0
 800288e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff f9fd 	bl	8001c96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 82fc 	beq.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c2:	82fb      	strh	r3, [r7, #22]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	8afb      	ldrh	r3, [r7, #22]
 80028d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	8013      	strh	r3, [r2, #0]
 80028e8:	e2da      	b.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d021      	beq.n	8002938 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800290a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800290e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	441a      	add	r2, r3
 8002920:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800292c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002934:	b29b      	uxth	r3, r3
 8002936:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 82ae 	bne.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800294c:	441a      	add	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800295a:	441a      	add	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6a1a      	ldr	r2, [r3, #32]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d30b      	bcc.n	8002984 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	6a1a      	ldr	r2, [r3, #32]
 8002978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297c:	1ad2      	subs	r2, r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	621a      	str	r2, [r3, #32]
 8002982:	e017      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d108      	bne.n	800299e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800298c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002990:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800299c:	e00a      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d165      	bne.n	8002a88 <HAL_PCD_EP_DB_Transmit+0x382>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029d0:	4413      	add	r3, r2
 80029d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	011a      	lsls	r2, r3, #4
 80029da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029dc:	4413      	add	r3, r2
 80029de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80029e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80029fa:	d91d      	bls.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x332>
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x310>
 8002a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a12:	3b01      	subs	r3, #1
 8002a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	029b      	lsls	r3, r3, #10
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	e044      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x350>
 8002a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	e035      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a84:	801a      	strh	r2, [r3, #0]
 8002a86:	e01c      	b.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d118      	bne.n	8002ac2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa4:	4413      	add	r3, r2
 8002aa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	011a      	lsls	r2, r3, #4
 8002aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ab6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6959      	ldr	r1, [r3, #20]
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	891a      	ldrh	r2, [r3, #8]
 8002ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f003 fc59 	bl	800638a <USB_WritePMA>
 8002ad8:	e1e2      	b.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	3306      	adds	r3, #6
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b02:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d307      	bcc.n	8002b22 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002b1a:	1ad2      	subs	r2, r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	619a      	str	r2, [r3, #24]
 8002b20:	e002      	b.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 80c0 	bne.w	8002cb2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d126      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x482>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b4e:	4413      	add	r3, r2
 8002b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	011a      	lsls	r2, r3, #4
 8002b58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	e01a      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d116      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ba4:	4413      	add	r3, r2
 8002ba6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	011a      	lsls	r2, r3, #4
 8002bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bba:	2200      	movs	r2, #0
 8002bbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12b      	bne.n	8002c24 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be0:	4413      	add	r3, r2
 8002be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	011a      	lsls	r2, r3, #4
 8002bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bec:	4413      	add	r3, r2
 8002bee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002bf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c20:	801a      	strh	r2, [r3, #0]
 8002c22:	e017      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d113      	bne.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c3a:	4413      	add	r3, r2
 8002c3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	011a      	lsls	r2, r3, #4
 8002c44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c46:	4413      	add	r3, r2
 8002c48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002c4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c50:	2200      	movs	r2, #0
 8002c52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff f81b 	bl	8001c96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f040 811a 	bne.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c86:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	441a      	add	r2, r3
 8002c98:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	8013      	strh	r3, [r2, #0]
 8002cb0:	e0f6      	b.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d121      	bne.n	8002d00 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cd6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	441a      	add	r2, r3
 8002ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	f040 80ca 	bne.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d14:	441a      	add	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d22:	441a      	add	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d30b      	bcc.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d44:	1ad2      	subs	r2, r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	621a      	str	r2, [r3, #32]
 8002d4a:	e017      	b.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002d54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002d58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002d64:	e00a      	b.n	8002d7c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	785b      	ldrb	r3, [r3, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d165      	bne.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x750>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d9e:	4413      	add	r3, r2
 8002da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	011a      	lsls	r2, r3, #4
 8002da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002daa:	4413      	add	r3, r2
 8002dac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002db0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dc0:	801a      	strh	r2, [r3, #0]
 8002dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002dc8:	d91d      	bls.n	8002e06 <HAL_PCD_EP_DB_Transmit+0x700>
 8002dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de0:	3b01      	subs	r3, #1
 8002de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	e041      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10a      	bne.n	8002e24 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	e032      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x738>
 8002e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	029b      	lsls	r3, r3, #10
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e52:	801a      	strh	r2, [r3, #0]
 8002e54:	e019      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	785b      	ldrb	r3, [r3, #1]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d115      	bne.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6c:	4413      	add	r3, r2
 8002e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	011a      	lsls	r2, r3, #4
 8002e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e78:	4413      	add	r3, r2
 8002e7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	6959      	ldr	r1, [r3, #20]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	895a      	ldrh	r2, [r3, #10]
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f003 fa75 	bl	800638a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002eba:	82bb      	strh	r3, [r7, #20]
 8002ebc:	8abb      	ldrh	r3, [r7, #20]
 8002ebe:	f083 0310 	eor.w	r3, r3, #16
 8002ec2:	82bb      	strh	r3, [r7, #20]
 8002ec4:	8abb      	ldrh	r3, [r7, #20]
 8002ec6:	f083 0320 	eor.w	r3, r3, #32
 8002eca:	82bb      	strh	r3, [r7, #20]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	8abb      	ldrh	r3, [r7, #20]
 8002edc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3790      	adds	r7, #144	@ 0x90
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
	...

08002efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e272      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
 8002f34:	4b8c      	ldr	r3, [pc, #560]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b89      	ldr	r3, [pc, #548]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x12c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e24c      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x76>
 8002f64:	4b80      	ldr	r3, [pc, #512]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7f      	ldr	r2, [pc, #508]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7a      	ldr	r2, [pc, #488]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b78      	ldr	r3, [pc, #480]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
 8002f9e:	4b72      	ldr	r3, [pc, #456]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a71      	ldr	r2, [pc, #452]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b6f      	ldr	r3, [pc, #444]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6e      	ldr	r2, [pc, #440]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b68      	ldr	r3, [pc, #416]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a67      	ldr	r2, [pc, #412]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fd fde4 	bl	8000ba4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fd fde0 	bl	8000ba4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e200      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe4>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fd fdd0 	bl	8000ba4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd fdcc 	bl	8000ba4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	@ 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1ec      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b53      	ldr	r3, [pc, #332]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x10c>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d063      	beq.n	80030fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b4c      	ldr	r3, [pc, #304]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003042:	4b49      	ldr	r3, [pc, #292]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
 800304e:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1c0      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4939      	ldr	r1, [pc, #228]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e03a      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b36      	ldr	r3, [pc, #216]	@ (800316c <HAL_RCC_OscConfig+0x270>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fd fd85 	bl	8000ba4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fd fd81 	bl	8000ba4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1a1      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4927      	ldr	r1, [pc, #156]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e015      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b26      	ldr	r3, [pc, #152]	@ (800316c <HAL_RCC_OscConfig+0x270>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fd fd64 	bl	8000ba4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fd fd60 	bl	8000ba4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e180      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03a      	beq.n	8003180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d019      	beq.n	8003146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <HAL_RCC_OscConfig+0x274>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fd fd44 	bl	8000ba4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7fd fd40 	bl	8000ba4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e160      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800313e:	2001      	movs	r0, #1
 8003140:	f000 fafe 	bl	8003740 <RCC_Delay>
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <HAL_RCC_OscConfig+0x274>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fd fd2a 	bl	8000ba4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fd fd26 	bl	8000ba4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e146      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	42420000 	.word	0x42420000
 8003170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b92      	ldr	r3, [pc, #584]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e9      	bne.n	8003154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a6 	beq.w	80032da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b8b      	ldr	r3, [pc, #556]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b88      	ldr	r3, [pc, #544]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a87      	ldr	r2, [pc, #540]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b85      	ldr	r3, [pc, #532]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b82      	ldr	r3, [pc, #520]	@ (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b7f      	ldr	r3, [pc, #508]	@ (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7e      	ldr	r2, [pc, #504]	@ (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fd fce7 	bl	8000ba4 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fd fce3 	bl	8000ba4 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	@ 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e103      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b75      	ldr	r3, [pc, #468]	@ (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 8003200:	4b6f      	ldr	r3, [pc, #444]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a6e      	ldr	r2, [pc, #440]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003216:	4b6a      	ldr	r3, [pc, #424]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a69      	ldr	r2, [pc, #420]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b67      	ldr	r3, [pc, #412]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a66      	ldr	r2, [pc, #408]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x356>
 8003238:	4b61      	ldr	r3, [pc, #388]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a60      	ldr	r2, [pc, #384]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	4b5e      	ldr	r3, [pc, #376]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a5d      	ldr	r2, [pc, #372]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003252:	4b5b      	ldr	r3, [pc, #364]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a5a      	ldr	r2, [pc, #360]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b58      	ldr	r3, [pc, #352]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a57      	ldr	r2, [pc, #348]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fd fc97 	bl	8000ba4 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fc93 	bl	8000ba4 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0b1      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b4b      	ldr	r3, [pc, #300]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x37e>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7fd fc81 	bl	8000ba4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd fc7d 	bl	8000ba4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e09b      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b40      	ldr	r3, [pc, #256]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b3c      	ldr	r3, [pc, #240]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a3b      	ldr	r2, [pc, #236]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8087 	beq.w	80033f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b36      	ldr	r3, [pc, #216]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d061      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d146      	bne.n	8003386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b33      	ldr	r3, [pc, #204]	@ (80033c8 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fd fc51 	bl	8000ba4 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fd fc4d 	bl	8000ba4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e06d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	4b29      	ldr	r3, [pc, #164]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800332e:	4b24      	ldr	r3, [pc, #144]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4921      	ldr	r1, [pc, #132]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b1f      	ldr	r3, [pc, #124]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a19      	ldr	r1, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	491b      	ldr	r1, [pc, #108]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fc21 	bl	8000ba4 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fd fc1d 	bl	8000ba4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
 8003384:	e035      	b.n	80033f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b10      	ldr	r3, [pc, #64]	@ (80033c8 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fd fc0a 	bl	8000ba4 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd fc06 	bl	8000ba4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e026      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x498>
 80033b2:	e01e      	b.n	80033f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e019      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_OscConfig+0x500>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d0      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b6a      	ldr	r3, [pc, #424]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b67      	ldr	r3, [pc, #412]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4965      	ldr	r1, [pc, #404]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a58      	ldr	r2, [pc, #352]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800347e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d040      	beq.n	8003520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e073      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b39      	ldr	r3, [pc, #228]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4936      	ldr	r1, [pc, #216]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f0:	f7fd fb58 	bl	8000ba4 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fd fb54 	bl	8000ba4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e053      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b24      	ldr	r3, [pc, #144]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 0207 	bic.w	r2, r3, #7
 8003536:	4922      	ldr	r1, [pc, #136]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1d0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fc ffa0 	bl	80004f4 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	08007948 	.word	0x08007948
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x94>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x30>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x36>
 8003602:	e027      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_RCC_GetSysClockFreq+0x98>)
 8003606:	613b      	str	r3, [r7, #16]
      break;
 8003608:	e027      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	4a17      	ldr	r2, [pc, #92]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x94>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0c5b      	lsrs	r3, r3, #17
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_RCC_GetSysClockFreq+0xa0>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a0d      	ldr	r2, [pc, #52]	@ (800366c <HAL_RCC_GetSysClockFreq+0x98>)
 8003636:	fb03 f202 	mul.w	r2, r3, r2
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e004      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0c      	ldr	r2, [pc, #48]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	613b      	str	r3, [r7, #16]
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_RCC_GetSysClockFreq+0x98>)
 8003656:	613b      	str	r3, [r7, #16]
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	693b      	ldr	r3, [r7, #16]
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	007a1200 	.word	0x007a1200
 8003670:	08007960 	.word	0x08007960
 8003674:	08007970 	.word	0x08007970
 8003678:	003d0900 	.word	0x003d0900

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b02      	ldr	r3, [pc, #8]	@ (800368c <HAL_RCC_GetHCLKFreq+0x10>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000000 	.word	0x20000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff2 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	@ (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	08007958 	.word	0x08007958

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffde 	bl	800367c <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0adb      	lsrs	r3, r3, #11
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	@ (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08007958 	.word	0x08007958

080036e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	220f      	movs	r2, #15
 80036ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036f0:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <HAL_RCC_GetClockConfig+0x58>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <HAL_RCC_GetClockConfig+0x58>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetClockConfig+0x58>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003714:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <HAL_RCC_GetClockConfig+0x58>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	08db      	lsrs	r3, r3, #3
 800371a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_GetClockConfig+0x5c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0207 	and.w	r2, r3, #7
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	40022000 	.word	0x40022000

08003740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003748:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <RCC_Delay+0x34>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <RCC_Delay+0x38>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	0a5b      	lsrs	r3, r3, #9
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800375c:	bf00      	nop
  }
  while (Delay --);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	60fa      	str	r2, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f9      	bne.n	800375c <RCC_Delay+0x1c>
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000000 	.word	0x20000000
 8003778:	10624dd3 	.word	0x10624dd3

0800377c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d07d      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379c:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	4b4c      	ldr	r3, [pc, #304]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	4a4b      	ldr	r2, [pc, #300]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b2:	61d3      	str	r3, [r2, #28]
 80037b4:	4b49      	ldr	r3, [pc, #292]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c0:	2301      	movs	r3, #1
 80037c2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	4b46      	ldr	r3, [pc, #280]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d118      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d0:	4b43      	ldr	r3, [pc, #268]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a42      	ldr	r2, [pc, #264]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037dc:	f7fd f9e2 	bl	8000ba4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	e008      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fd f9de 	bl	8000ba4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	@ 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e06d      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b3a      	ldr	r3, [pc, #232]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003802:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800380a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d02e      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d027      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003820:	4b2e      	ldr	r3, [pc, #184]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003828:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382a:	4b2e      	ldr	r3, [pc, #184]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003830:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003836:	4a29      	ldr	r2, [pc, #164]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d014      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003846:	f7fd f9ad 	bl	8000ba4 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd f9a9 	bl	8000ba4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e036      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	4b1d      	ldr	r3, [pc, #116]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ee      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003870:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4917      	ldr	r1, [pc, #92]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	4313      	orrs	r3, r2
 8003880:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b14      	ldr	r3, [pc, #80]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4a13      	ldr	r2, [pc, #76]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003892:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038a0:	4b0e      	ldr	r3, [pc, #56]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	490b      	ldr	r1, [pc, #44]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038be:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4904      	ldr	r1, [pc, #16]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	42420440 	.word	0x42420440

080038e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e041      	b.n	800397e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fc ff2e 	bl	8000770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 fa5c 	bl	8003de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e03a      	b.n	8003a16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a18      	ldr	r2, [pc, #96]	@ (8003a20 <HAL_TIM_Base_Start_IT+0x98>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x58>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ca:	d009      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x58>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <HAL_TIM_Base_Start_IT+0x9c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x58>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <HAL_TIM_Base_Start_IT+0xa0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d010      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a02:	e007      	b.n	8003a14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800

08003a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d020      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0202 	mvn.w	r2, #2
 8003a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f998 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f98b 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f99a 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d020      	beq.n	8003adc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0204 	mvn.w	r2, #4
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f972 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f965 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f974 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d020      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0208 	mvn.w	r2, #8
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2204      	movs	r2, #4
 8003afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f94c 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f93f 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f94e 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f926 	bl	8003dac <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f919 	bl	8003d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f928 	bl	8003dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0201 	mvn.w	r2, #1
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fc fc5e 	bl	8000454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00c      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa7f 	bl	80040ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8f8 	bl	8003dd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00c      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0220 	mvn.w	r2, #32
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa52 	bl	80040a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIM_ConfigClockSource+0x1c>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e0b4      	b.n	8003d92 <HAL_TIM_ConfigClockSource+0x186>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c60:	d03e      	beq.n	8003ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c66:	f200 8087 	bhi.w	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c6e:	f000 8086 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x172>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c76:	d87f      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b70      	cmp	r3, #112	@ 0x70
 8003c7a:	d01a      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8003c7c:	2b70      	cmp	r3, #112	@ 0x70
 8003c7e:	d87b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b60      	cmp	r3, #96	@ 0x60
 8003c82:	d050      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x11a>
 8003c84:	2b60      	cmp	r3, #96	@ 0x60
 8003c86:	d877      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b50      	cmp	r3, #80	@ 0x50
 8003c8a:	d03c      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xfa>
 8003c8c:	2b50      	cmp	r3, #80	@ 0x50
 8003c8e:	d873      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b40      	cmp	r3, #64	@ 0x40
 8003c92:	d058      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x13a>
 8003c94:	2b40      	cmp	r3, #64	@ 0x40
 8003c96:	d86f      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b30      	cmp	r3, #48	@ 0x30
 8003c9a:	d064      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003c9c:	2b30      	cmp	r3, #48	@ 0x30
 8003c9e:	d86b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d060      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d867      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05c      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d05a      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb0:	e062      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc2:	f000 f974 	bl	8003fae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	609a      	str	r2, [r3, #8]
      break;
 8003cde:	e04f      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf0:	f000 f95d 	bl	8003fae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d02:	609a      	str	r2, [r3, #8]
      break;
 8003d04:	e03c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 f8d4 	bl	8003ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2150      	movs	r1, #80	@ 0x50
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f92b 	bl	8003f7a <TIM_ITRx_SetConfig>
      break;
 8003d24:	e02c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 f8f2 	bl	8003f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2160      	movs	r1, #96	@ 0x60
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f91b 	bl	8003f7a <TIM_ITRx_SetConfig>
      break;
 8003d44:	e01c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f8b4 	bl	8003ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2140      	movs	r1, #64	@ 0x40
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f90b 	bl	8003f7a <TIM_ITRx_SetConfig>
      break;
 8003d64:	e00c      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f000 f902 	bl	8003f7a <TIM_ITRx_SetConfig>
      break;
 8003d76:	e003      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e000      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bc80      	pop	{r7}
 8003de0:	4770      	bx	lr
	...

08003de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <TIM_Base_SetConfig+0xd0>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_Base_SetConfig+0x30>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e02:	d007      	beq.n	8003e14 <TIM_Base_SetConfig+0x30>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb8 <TIM_Base_SetConfig+0xd4>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0x30>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ebc <TIM_Base_SetConfig+0xd8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d108      	bne.n	8003e26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <TIM_Base_SetConfig+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0x62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0x62>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a1f      	ldr	r2, [pc, #124]	@ (8003eb8 <TIM_Base_SetConfig+0xd4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0x62>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1e      	ldr	r2, [pc, #120]	@ (8003ebc <TIM_Base_SetConfig+0xd8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <TIM_Base_SetConfig+0xd0>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d103      	bne.n	8003e8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	611a      	str	r2, [r3, #16]
  }
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40000400 	.word	0x40000400
 8003ebc:	40000800 	.word	0x40000800

08003ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f023 0201 	bic.w	r2, r3, #1
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f023 030a 	bic.w	r3, r3, #10
 8003efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0210 	bic.w	r2, r3, #16
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	031b      	lsls	r3, r3, #12
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	f043 0307 	orr.w	r3, r3, #7
 8003f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	609a      	str	r2, [r3, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr

08003fae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	609a      	str	r2, [r3, #8]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e046      	b.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a16      	ldr	r2, [pc, #88]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00e      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004050:	d009      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a12      	ldr	r2, [pc, #72]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a10      	ldr	r2, [pc, #64]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800406c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	4313      	orrs	r3, r2
 8004076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800

080040a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e042      	b.n	8004164 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fc fbe0 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	@ 0x24
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800410e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fc7f 	bl	8004a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b0ba      	sub	sp, #232	@ 0xe8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800419e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_UART_IRQHandler+0x66>
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fb63 	bl	8004896 <UART_Receive_IT>
      return;
 80041d0:	e25b      	b.n	800468a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80de 	beq.w	8004398 <HAL_UART_IRQHandler+0x22c>
 80041dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80d1 	beq.w	8004398 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00b      	beq.n	800421a <HAL_UART_IRQHandler+0xae>
 8004202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800421a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_UART_IRQHandler+0xd2>
 8004226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	f043 0202 	orr.w	r2, r3, #2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_UART_IRQHandler+0xf6>
 800424a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d005      	beq.n	8004262 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f043 0204 	orr.w	r2, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d011      	beq.n	8004292 <HAL_UART_IRQHandler+0x126>
 800426e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d105      	bne.n	8004286 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800427a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428a:	f043 0208 	orr.w	r2, r3, #8
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 81f2 	beq.w	8004680 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800429c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_UART_IRQHandler+0x14e>
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 faee 	bl	8004896 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <HAL_UART_IRQHandler+0x17a>
 80042de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d04f      	beq.n	8004386 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9f8 	bl	80046dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d041      	beq.n	800437e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3314      	adds	r3, #20
 8004322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004326:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800432a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800433e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1d9      	bne.n	80042fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d013      	beq.n	8004376 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004352:	4a7e      	ldr	r2, [pc, #504]	@ (800454c <HAL_UART_IRQHandler+0x3e0>)
 8004354:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd f86e 	bl	800143c <HAL_DMA_Abort_IT>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800436a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004370:	4610      	mov	r0, r2
 8004372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004374:	e00e      	b.n	8004394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f99c 	bl	80046b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	e00a      	b.n	8004394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f998 	bl	80046b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004384:	e006      	b.n	8004394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f994 	bl	80046b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004392:	e175      	b.n	8004680 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004394:	bf00      	nop
    return;
 8004396:	e173      	b.n	8004680 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	2b01      	cmp	r3, #1
 800439e:	f040 814f 	bne.w	8004640 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 8148 	beq.w	8004640 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8141 	beq.w	8004640 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043be:	2300      	movs	r3, #0
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80b6 	beq.w	8004550 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8145 	beq.w	8004684 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004402:	429a      	cmp	r2, r3
 8004404:	f080 813e 	bcs.w	8004684 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800440e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b20      	cmp	r3, #32
 8004418:	f000 8088 	beq.w	800452c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	330c      	adds	r3, #12
 8004422:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004436:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800443a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004448:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800444c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004454:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1d9      	bne.n	800441c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3314      	adds	r3, #20
 8004488:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800448c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004490:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004494:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800449e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e1      	bne.n	8004468 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3314      	adds	r3, #20
 80044aa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3314      	adds	r3, #20
 80044c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044ca:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e3      	bne.n	80044a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044fc:	f023 0310 	bic.w	r3, r3, #16
 8004500:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800450e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004510:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800451c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e3      	bne.n	80044ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc ff4d 	bl	80013c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800453a:	b29b      	uxth	r3, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	b29b      	uxth	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8bf 	bl	80046c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004548:	e09c      	b.n	8004684 <HAL_UART_IRQHandler+0x518>
 800454a:	bf00      	nop
 800454c:	080047a1 	.word	0x080047a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004558:	b29b      	uxth	r3, r3
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 808e 	beq.w	8004688 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800456c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8089 	beq.w	8004688 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	330c      	adds	r3, #12
 800457c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004588:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800458c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800459a:	647a      	str	r2, [r7, #68]	@ 0x44
 800459c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e3      	bne.n	8004576 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	623b      	str	r3, [r7, #32]
   return(result);
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80045d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e3      	bne.n	80045ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	60fb      	str	r3, [r7, #12]
   return(result);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0310 	bic.w	r3, r3, #16
 800460a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	330c      	adds	r3, #12
 8004614:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004618:	61fa      	str	r2, [r7, #28]
 800461a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	69b9      	ldr	r1, [r7, #24]
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	617b      	str	r3, [r7, #20]
   return(result);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e3      	bne.n	80045f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004632:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f844 	bl	80046c6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800463e:	e023      	b.n	8004688 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d009      	beq.n	8004660 <HAL_UART_IRQHandler+0x4f4>
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f8b5 	bl	80047c8 <UART_Transmit_IT>
    return;
 800465e:	e014      	b.n	800468a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00e      	beq.n	800468a <HAL_UART_IRQHandler+0x51e>
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8f4 	bl	8004866 <UART_EndTransmit_IT>
    return;
 800467e:	e004      	b.n	800468a <HAL_UART_IRQHandler+0x51e>
    return;
 8004680:	bf00      	nop
 8004682:	e002      	b.n	800468a <HAL_UART_IRQHandler+0x51e>
      return;
 8004684:	bf00      	nop
 8004686:	e000      	b.n	800468a <HAL_UART_IRQHandler+0x51e>
      return;
 8004688:	bf00      	nop
  }
}
 800468a:	37e8      	adds	r7, #232	@ 0xe8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	bc80      	pop	{r7}
 80046a0:	4770      	bx	lr

080046a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b095      	sub	sp, #84	@ 0x54
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004704:	643a      	str	r2, [r7, #64]	@ 0x40
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800470a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e5      	bne.n	80046e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3314      	adds	r3, #20
 800471e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	61fb      	str	r3, [r7, #28]
   return(result);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3314      	adds	r3, #20
 8004736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800473a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e5      	bne.n	8004718 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	d119      	bne.n	8004788 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	60bb      	str	r3, [r7, #8]
   return(result);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f023 0310 	bic.w	r3, r3, #16
 800476a:	647b      	str	r3, [r7, #68]	@ 0x44
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004774:	61ba      	str	r2, [r7, #24]
 8004776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6979      	ldr	r1, [r7, #20]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	613b      	str	r3, [r7, #16]
   return(result);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004796:	bf00      	nop
 8004798:	3754      	adds	r7, #84	@ 0x54
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ff7a 	bl	80046b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047c0:	bf00      	nop
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b21      	cmp	r3, #33	@ 0x21
 80047da:	d13e      	bne.n	800485a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047e4:	d114      	bne.n	8004810 <UART_Transmit_IT+0x48>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d110      	bne.n	8004810 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004802:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	621a      	str	r2, [r3, #32]
 800480e:	e008      	b.n	8004822 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	1c59      	adds	r1, r3, #1
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6211      	str	r1, [r2, #32]
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29b      	uxth	r3, r3
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4619      	mov	r1, r3
 8004830:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10f      	bne.n	8004856 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004844:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004854:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e000      	b.n	800485c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800487c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff02 	bl	8004690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08c      	sub	sp, #48	@ 0x30
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b22      	cmp	r3, #34	@ 0x22
 80048a8:	f040 80ae 	bne.w	8004a08 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b4:	d117      	bne.n	80048e6 <UART_Receive_IT+0x50>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d113      	bne.n	80048e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	1c9a      	adds	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80048e4:	e026      	b.n	8004934 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f8:	d007      	beq.n	800490a <UART_Receive_IT+0x74>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <UART_Receive_IT+0x82>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e008      	b.n	800492a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004924:	b2da      	uxtb	r2, r3
 8004926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004928:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29b      	uxth	r3, r3
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4619      	mov	r1, r3
 8004942:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004944:	2b00      	cmp	r3, #0
 8004946:	d15d      	bne.n	8004a04 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0220 	bic.w	r2, r2, #32
 8004956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498a:	2b01      	cmp	r3, #1
 800498c:	d135      	bne.n	80049fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	613b      	str	r3, [r7, #16]
   return(result);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 0310 	bic.w	r3, r3, #16
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	330c      	adds	r3, #12
 80049b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b4:	623a      	str	r2, [r7, #32]
 80049b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	69f9      	ldr	r1, [r7, #28]
 80049ba:	6a3a      	ldr	r2, [r7, #32]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d10a      	bne.n	80049ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049f0:	4619      	mov	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7ff fe67 	bl	80046c6 <HAL_UARTEx_RxEventCallback>
 80049f8:	e002      	b.n	8004a00 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fe51 	bl	80046a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e002      	b.n	8004a0a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3730      	adds	r7, #48	@ 0x30
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004a4e:	f023 030c 	bic.w	r3, r3, #12
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <UART_SetConfig+0x114>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7fe fe1c 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	e002      	b.n	8004a8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a84:	f7fe fe04 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8004a88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009a      	lsls	r2, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	4a22      	ldr	r2, [pc, #136]	@ (8004b2c <UART_SetConfig+0x118>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	0119      	lsls	r1, r3, #4
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009a      	lsls	r2, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <UART_SetConfig+0x118>)
 8004ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2064      	movs	r0, #100	@ 0x64
 8004aca:	fb00 f303 	mul.w	r3, r0, r3
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	3332      	adds	r3, #50	@ 0x32
 8004ad4:	4a15      	ldr	r2, [pc, #84]	@ (8004b2c <UART_SetConfig+0x118>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ae0:	4419      	add	r1, r3
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009a      	lsls	r2, r3, #2
 8004aec:	441a      	add	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <UART_SetConfig+0x118>)
 8004afa:	fba3 0302 	umull	r0, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2064      	movs	r0, #100	@ 0x64
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	@ 0x32
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <UART_SetConfig+0x118>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	440a      	add	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40013800 	.word	0x40013800
 8004b2c:	51eb851f 	.word	0x51eb851f

08004b30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	4638      	mov	r0, r7
 8004b3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b52:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004b56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0c2      	sub	sp, #264	@ 0x108
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004bde:	6018      	str	r0, [r3, #0]
 8004be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004be8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004bee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f040 86b7 	bne.w	800596a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d908      	bls.n	8004c2a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c28:	e007      	b.n	8004c3a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	7b1b      	ldrb	r3, [r3, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d13a      	bne.n	8004cc0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6959      	ldr	r1, [r3, #20]
 8004c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	88da      	ldrh	r2, [r3, #6]
 8004c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004c6c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004c70:	6800      	ldr	r0, [r0, #0]
 8004c72:	f001 fb8a 	bl	800638a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	461a      	mov	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	011a      	lsls	r2, r3, #4
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	f000 be1f 	b.w	80058fe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	f040 8462 	bne.w	8005596 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004cd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	f240 83df 	bls.w	80054ae <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d40:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5c:	1ad2      	subs	r2, r2, r3
 8004d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 81c7 	beq.w	8005120 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004da2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d177      	bne.n	8004e9e <USB_EPStartXfer+0x2ce>
 8004dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004db2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	4413      	add	r3, r2
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	011a      	lsls	r2, r3, #4
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	4413      	add	r3, r2
 8004de4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e00:	d921      	bls.n	8004e46 <USB_EPStartXfer+0x276>
 8004e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e06:	095b      	lsrs	r3, r3, #5
 8004e08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <USB_EPStartXfer+0x252>
 8004e18:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4313      	orrs	r3, r2
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e42:	801a      	strh	r2, [r3, #0]
 8004e44:	e050      	b.n	8004ee8 <USB_EPStartXfer+0x318>
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10a      	bne.n	8004e64 <USB_EPStartXfer+0x294>
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	e041      	b.n	8004ee8 <USB_EPStartXfer+0x318>
 8004e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <USB_EPStartXfer+0x2b4>
 8004e7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	029b      	lsls	r3, r3, #10
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e024      	b.n	8004ee8 <USB_EPStartXfer+0x318>
 8004e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d11c      	bne.n	8004ee8 <USB_EPStartXfer+0x318>
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	4413      	add	r3, r2
 8004ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	011a      	lsls	r2, r3, #4
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	895b      	ldrh	r3, [r3, #10]
 8004ef4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6959      	ldr	r1, [r3, #20]
 8004f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f16:	6800      	ldr	r0, [r0, #0]
 8004f18:	f001 fa37 	bl	800638a <USB_WritePMA>
            ep->xfer_buff += len;
 8004f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2c:	441a      	add	r2, r3
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6a1a      	ldr	r2, [r3, #32]
 8004f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90f      	bls.n	8004f76 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	1ad2      	subs	r2, r2, r3
 8004f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	621a      	str	r2, [r3, #32]
 8004f74:	e00e      	b.n	8004f94 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2200      	movs	r2, #0
 8004f92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d177      	bne.n	8005094 <USB_EPStartXfer+0x4c4>
 8004fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	011a      	lsls	r2, r3, #4
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ff6:	d921      	bls.n	800503c <USB_EPStartXfer+0x46c>
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <USB_EPStartXfer+0x448>
 800500e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005012:	3b01      	subs	r3, #1
 8005014:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29a      	uxth	r2, r3
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005022:	b29b      	uxth	r3, r3
 8005024:	029b      	lsls	r3, r3, #10
 8005026:	b29b      	uxth	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	b29b      	uxth	r3, r3
 800502c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005034:	b29a      	uxth	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	e056      	b.n	80050ea <USB_EPStartXfer+0x51a>
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10a      	bne.n	800505a <USB_EPStartXfer+0x48a>
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005052:	b29a      	uxth	r2, r3
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	e047      	b.n	80050ea <USB_EPStartXfer+0x51a>
 800505a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <USB_EPStartXfer+0x4aa>
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005074:	3301      	adds	r3, #1
 8005076:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29a      	uxth	r2, r3
 8005080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005084:	b29b      	uxth	r3, r3
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	b29b      	uxth	r3, r3
 800508a:	4313      	orrs	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	801a      	strh	r2, [r3, #0]
 8005092:	e02a      	b.n	80050ea <USB_EPStartXfer+0x51a>
 8005094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d122      	bne.n	80050ea <USB_EPStartXfer+0x51a>
 80050a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	623b      	str	r3, [r7, #32]
 80050b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	4413      	add	r3, r2
 80050c6:	623b      	str	r3, [r7, #32]
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	4413      	add	r3, r2
 80050da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	891b      	ldrh	r3, [r3, #8]
 80050f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6959      	ldr	r1, [r3, #20]
 8005106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510a:	b29b      	uxth	r3, r3
 800510c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005110:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005114:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005118:	6800      	ldr	r0, [r0, #0]
 800511a:	f001 f936 	bl	800638a <USB_WritePMA>
 800511e:	e3ee      	b.n	80058fe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d177      	bne.n	8005220 <USB_EPStartXfer+0x650>
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005150:	4413      	add	r3, r2
 8005152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	011a      	lsls	r2, r3, #4
 8005162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005164:	4413      	add	r3, r2
 8005166:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800516a:	647b      	str	r3, [r7, #68]	@ 0x44
 800516c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005176:	b29a      	uxth	r2, r3
 8005178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	2b3e      	cmp	r3, #62	@ 0x3e
 8005182:	d921      	bls.n	80051c8 <USB_EPStartXfer+0x5f8>
 8005184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800518e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <USB_EPStartXfer+0x5d4>
 800519a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800519e:	3b01      	subs	r3, #1
 80051a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	029b      	lsls	r3, r3, #10
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	4313      	orrs	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c4:	801a      	strh	r2, [r3, #0]
 80051c6:	e056      	b.n	8005276 <USB_EPStartXfer+0x6a6>
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <USB_EPStartXfer+0x616>
 80051d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e047      	b.n	8005276 <USB_EPStartXfer+0x6a6>
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <USB_EPStartXfer+0x636>
 80051fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005200:	3301      	adds	r3, #1
 8005202:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	b29a      	uxth	r2, r3
 800520c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29b      	uxth	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b29a      	uxth	r2, r3
 800521a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e02a      	b.n	8005276 <USB_EPStartXfer+0x6a6>
 8005220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d122      	bne.n	8005276 <USB_EPStartXfer+0x6a6>
 8005230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	653b      	str	r3, [r7, #80]	@ 0x50
 800523c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005250:	4413      	add	r3, r2
 8005252:	653b      	str	r3, [r7, #80]	@ 0x50
 8005254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	011a      	lsls	r2, r3, #4
 8005262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005264:	4413      	add	r3, r2
 8005266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005270:	b29a      	uxth	r2, r3
 8005272:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	891b      	ldrh	r3, [r3, #8]
 8005282:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6959      	ldr	r1, [r3, #20]
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005296:	b29b      	uxth	r3, r3
 8005298:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800529c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052a4:	6800      	ldr	r0, [r0, #0]
 80052a6:	f001 f870 	bl	800638a <USB_WritePMA>
            ep->xfer_buff += len;
 80052aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ba:	441a      	add	r2, r3
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d90f      	bls.n	8005304 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80052e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f4:	1ad2      	subs	r2, r2, r3
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	621a      	str	r2, [r3, #32]
 8005302:	e00e      	b.n	8005322 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2200      	movs	r2, #0
 8005320:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	643b      	str	r3, [r7, #64]	@ 0x40
 800532e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d177      	bne.n	800542e <USB_EPStartXfer+0x85e>
 800533e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005342:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	63bb      	str	r3, [r7, #56]	@ 0x38
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	4413      	add	r3, r2
 8005360:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	011a      	lsls	r2, r3, #4
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	4413      	add	r3, r2
 8005374:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005378:	637b      	str	r3, [r7, #52]	@ 0x34
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005384:	b29a      	uxth	r2, r3
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005390:	d921      	bls.n	80053d6 <USB_EPStartXfer+0x806>
 8005392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800539c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <USB_EPStartXfer+0x7e2>
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	3b01      	subs	r3, #1
 80053ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	b29b      	uxth	r3, r3
 80053be:	029b      	lsls	r3, r3, #10
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4313      	orrs	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	e050      	b.n	8005478 <USB_EPStartXfer+0x8a8>
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <USB_EPStartXfer+0x824>
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e041      	b.n	8005478 <USB_EPStartXfer+0x8a8>
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f8:	085b      	lsrs	r3, r3, #1
 80053fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d004      	beq.n	8005414 <USB_EPStartXfer+0x844>
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	3301      	adds	r3, #1
 8005410:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29b      	uxth	r3, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	b29a      	uxth	r2, r3
 8005428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542a:	801a      	strh	r2, [r3, #0]
 800542c:	e024      	b.n	8005478 <USB_EPStartXfer+0x8a8>
 800542e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d11c      	bne.n	8005478 <USB_EPStartXfer+0x8a8>
 800543e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005452:	4413      	add	r3, r2
 8005454:	643b      	str	r3, [r7, #64]	@ 0x40
 8005456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005466:	4413      	add	r3, r2
 8005468:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800546c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	b29a      	uxth	r2, r3
 8005474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005476:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	895b      	ldrh	r3, [r3, #10]
 8005484:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6959      	ldr	r1, [r3, #20]
 8005494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005498:	b29b      	uxth	r3, r3
 800549a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800549e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f000 ff6f 	bl	800638a <USB_WritePMA>
 80054ac:	e227      	b.n	80058fe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80054e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80054e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800550a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800550e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005516:	b29b      	uxth	r3, r3
 8005518:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800551a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005526:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005534:	b29b      	uxth	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800553a:	4413      	add	r3, r2
 800553c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	011a      	lsls	r2, r3, #4
 800554c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800554e:	4413      	add	r3, r2
 8005550:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005554:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800555a:	b29a      	uxth	r2, r3
 800555c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800555e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	891b      	ldrh	r3, [r3, #8]
 800556c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6959      	ldr	r1, [r3, #20]
 800557c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005580:	b29b      	uxth	r3, r3
 8005582:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005586:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800558a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	f000 fefb 	bl	800638a <USB_WritePMA>
 8005594:	e1b3      	b.n	80058fe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1a      	ldr	r2, [r3, #32]
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 80c6 	beq.w	8005768 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80055e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d177      	bne.n	80056e8 <USB_EPStartXfer+0xb18>
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005618:	4413      	add	r3, r2
 800561a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800561c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	011a      	lsls	r2, r3, #4
 800562a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800562c:	4413      	add	r3, r2
 800562e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005632:	667b      	str	r3, [r7, #100]	@ 0x64
 8005634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800563e:	b29a      	uxth	r2, r3
 8005640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	2b3e      	cmp	r3, #62	@ 0x3e
 800564a:	d921      	bls.n	8005690 <USB_EPStartXfer+0xac0>
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2b00      	cmp	r3, #0
 8005660:	d104      	bne.n	800566c <USB_EPStartXfer+0xa9c>
 8005662:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005666:	3b01      	subs	r3, #1
 8005668:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800566c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29a      	uxth	r2, r3
 8005672:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005676:	b29b      	uxth	r3, r3
 8005678:	029b      	lsls	r3, r3, #10
 800567a:	b29b      	uxth	r3, r3
 800567c:	4313      	orrs	r3, r2
 800567e:	b29b      	uxth	r3, r3
 8005680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005688:	b29a      	uxth	r2, r3
 800568a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e050      	b.n	8005732 <USB_EPStartXfer+0xb62>
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_EPStartXfer+0xade>
 8005698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e041      	b.n	8005732 <USB_EPStartXfer+0xb62>
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <USB_EPStartXfer+0xafe>
 80056c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056c8:	3301      	adds	r3, #1
 80056ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056d8:	b29b      	uxth	r3, r3
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4313      	orrs	r3, r2
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e024      	b.n	8005732 <USB_EPStartXfer+0xb62>
 80056e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d11c      	bne.n	8005732 <USB_EPStartXfer+0xb62>
 80056f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800570c:	4413      	add	r3, r2
 800570e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005720:	4413      	add	r3, r2
 8005722:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800572c:	b29a      	uxth	r2, r3
 800572e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005730:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	895b      	ldrh	r3, [r3, #10]
 800573e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	b29b      	uxth	r3, r3
 8005754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005758:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800575c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005760:	6800      	ldr	r0, [r0, #0]
 8005762:	f000 fe12 	bl	800638a <USB_WritePMA>
 8005766:	e0ca      	b.n	80058fe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d177      	bne.n	8005868 <USB_EPStartXfer+0xc98>
 8005778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005792:	b29b      	uxth	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005798:	4413      	add	r3, r2
 800579a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800579c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057be:	b29a      	uxth	r2, r3
 80057c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057c2:	801a      	strh	r2, [r3, #0]
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057ca:	d921      	bls.n	8005810 <USB_EPStartXfer+0xc40>
 80057cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d0:	095b      	lsrs	r3, r3, #5
 80057d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d104      	bne.n	80057ec <USB_EPStartXfer+0xc1c>
 80057e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e05c      	b.n	80058ca <USB_EPStartXfer+0xcfa>
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <USB_EPStartXfer+0xc5e>
 8005818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e04d      	b.n	80058ca <USB_EPStartXfer+0xcfa>
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d004      	beq.n	800584e <USB_EPStartXfer+0xc7e>
 8005844:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005848:	3301      	adds	r3, #1
 800584a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800584e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005858:	b29b      	uxth	r3, r3
 800585a:	029b      	lsls	r3, r3, #10
 800585c:	b29b      	uxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	b29a      	uxth	r2, r3
 8005862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e030      	b.n	80058ca <USB_EPStartXfer+0xcfa>
 8005868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	785b      	ldrb	r3, [r3, #1]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d128      	bne.n	80058ca <USB_EPStartXfer+0xcfa>
 8005878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800587c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005894:	b29b      	uxth	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800589c:	4413      	add	r3, r2
 800589e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	011a      	lsls	r2, r3, #4
 80058b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058b4:	4413      	add	r3, r2
 80058b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80058ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80058c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	891b      	ldrh	r3, [r3, #8]
 80058d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6959      	ldr	r1, [r3, #20]
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80058f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80058f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058f8:	6800      	ldr	r0, [r0, #0]
 80058fa:	f000 fd46 	bl	800638a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005924:	817b      	strh	r3, [r7, #10]
 8005926:	897b      	ldrh	r3, [r7, #10]
 8005928:	f083 0310 	eor.w	r3, r3, #16
 800592c:	817b      	strh	r3, [r7, #10]
 800592e:	897b      	ldrh	r3, [r7, #10]
 8005930:	f083 0320 	eor.w	r3, r3, #32
 8005934:	817b      	strh	r3, [r7, #10]
 8005936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	441a      	add	r2, r3
 8005950:	897b      	ldrh	r3, [r7, #10]
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800595a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]
 8005966:	f000 bcde 	b.w	8006326 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800596a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	7b1b      	ldrb	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 80bb 	bne.w	8005af2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800597c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699a      	ldr	r2, [r3, #24]
 8005988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800598c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	429a      	cmp	r2, r3
 8005996:	d917      	bls.n	80059c8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800599c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80059a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699a      	ldr	r2, [r3, #24]
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b8:	1ad2      	subs	r2, r2, r3
 80059ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	e00e      	b.n	80059e6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80059d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2200      	movs	r2, #0
 80059e4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a22:	4413      	add	r3, r2
 8005a24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a46:	d924      	bls.n	8005a92 <USB_EPStartXfer+0xec2>
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <USB_EPStartXfer+0xe98>
 8005a5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a62:	3b01      	subs	r3, #1
 8005a64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	f000 bc10 	b.w	80062b2 <USB_EPStartXfer+0x16e2>
 8005a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10c      	bne.n	8005ab4 <USB_EPStartXfer+0xee4>
 8005a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e3fe      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <USB_EPStartXfer+0xf04>
 8005aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e3df      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	f040 8218 	bne.w	8005f34 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f040 809d 	bne.w	8005c50 <USB_EPStartXfer+0x1080>
 8005b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	011a      	lsls	r2, r3, #4
 8005b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b7e:	d92b      	bls.n	8005bd8 <USB_EPStartXfer+0x1008>
 8005b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <USB_EPStartXfer+0xfe0>
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005baa:	3b01      	subs	r3, #1
 8005bac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	029b      	lsls	r3, r3, #10
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e070      	b.n	8005cba <USB_EPStartXfer+0x10ea>
 8005bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10c      	bne.n	8005c02 <USB_EPStartXfer+0x1032>
 8005be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e05b      	b.n	8005cba <USB_EPStartXfer+0x10ea>
 8005c02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	085b      	lsrs	r3, r3, #1
 8005c10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <USB_EPStartXfer+0x1062>
 8005c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e034      	b.n	8005cba <USB_EPStartXfer+0x10ea>
 8005c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	785b      	ldrb	r3, [r3, #1]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d12c      	bne.n	8005cba <USB_EPStartXfer+0x10ea>
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c84:	4413      	add	r3, r2
 8005c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	011a      	lsls	r2, r3, #4
 8005c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	785b      	ldrb	r3, [r3, #1]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 809d 	bne.w	8005e14 <USB_EPStartXfer+0x1244>
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d42:	d92b      	bls.n	8005d9c <USB_EPStartXfer+0x11cc>
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d104      	bne.n	8005d74 <USB_EPStartXfer+0x11a4>
 8005d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e069      	b.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10c      	bne.n	8005dc6 <USB_EPStartXfer+0x11f6>
 8005dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e054      	b.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <USB_EPStartXfer+0x1226>
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e02d      	b.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d125      	bne.n	8005e70 <USB_EPStartXfer+0x12a0>
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	011a      	lsls	r2, r3, #4
 8005e4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e52:	4413      	add	r3, r2
 8005e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e6e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8218 	beq.w	80062b2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ea2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <USB_EPStartXfer+0x12ea>
 8005eae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d10d      	bne.n	8005ed6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 81f5 	bne.w	80062b2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ec8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 81ee 	bne.w	80062b2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]
 8005f32:	e1be      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	78db      	ldrb	r3, [r3, #3]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	f040 81b4 	bne.w	80062ae <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d917      	bls.n	8005f92 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f82:	1ad2      	subs	r2, r2, r3
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	619a      	str	r2, [r3, #24]
 8005f90:	e00e      	b.n	8005fb0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	785b      	ldrb	r3, [r3, #1]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 8085 	bne.w	80060cc <USB_EPStartXfer+0x14fc>
 8005fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ffe:	4413      	add	r3, r2
 8006000:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006004:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006008:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006014:	b29a      	uxth	r2, r3
 8006016:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006020:	2b3e      	cmp	r3, #62	@ 0x3e
 8006022:	d923      	bls.n	800606c <USB_EPStartXfer+0x149c>
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800602e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	2b00      	cmp	r3, #0
 8006038:	d104      	bne.n	8006044 <USB_EPStartXfer+0x1474>
 800603a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800603e:	3b01      	subs	r3, #1
 8006040:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29a      	uxth	r2, r3
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006050:	b29b      	uxth	r3, r3
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	b29b      	uxth	r3, r3
 8006056:	4313      	orrs	r3, r2
 8006058:	b29b      	uxth	r3, r3
 800605a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800605e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006062:	b29a      	uxth	r2, r3
 8006064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e060      	b.n	800612e <USB_EPStartXfer+0x155e>
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10c      	bne.n	800608e <USB_EPStartXfer+0x14be>
 8006074:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006084:	b29a      	uxth	r2, r3
 8006086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e04f      	b.n	800612e <USB_EPStartXfer+0x155e>
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <USB_EPStartXfer+0x14de>
 80060a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a8:	3301      	adds	r3, #1
 80060aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	029b      	lsls	r3, r3, #10
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e030      	b.n	800612e <USB_EPStartXfer+0x155e>
 80060cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d128      	bne.n	800612e <USB_EPStartXfer+0x155e>
 80060dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006100:	4413      	add	r3, r2
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	011a      	lsls	r2, r3, #4
 8006114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006118:	4413      	add	r3, r2
 800611a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800611e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800613c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	785b      	ldrb	r3, [r3, #1]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8085 	bne.w	8006258 <USB_EPStartXfer+0x1688>
 800614e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006152:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800615c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006160:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006172:	4413      	add	r3, r2
 8006174:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	011a      	lsls	r2, r3, #4
 8006186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800618a:	4413      	add	r3, r2
 800618c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ae:	d923      	bls.n	80061f8 <USB_EPStartXfer+0x1628>
 80061b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USB_EPStartXfer+0x1600>
 80061c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ca:	3b01      	subs	r3, #1
 80061cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061dc:	b29b      	uxth	r3, r3
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e05c      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 80061f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10c      	bne.n	800621a <USB_EPStartXfer+0x164a>
 8006200:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006210:	b29a      	uxth	r2, r3
 8006212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006216:	801a      	strh	r2, [r3, #0]
 8006218:	e04b      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <USB_EPStartXfer+0x166a>
 8006230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006234:	3301      	adds	r3, #1
 8006236:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800623a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29b      	uxth	r3, r3
 800624c:	4313      	orrs	r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e02c      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
 8006258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d124      	bne.n	80062b2 <USB_EPStartXfer+0x16e2>
 8006268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800627e:	4413      	add	r3, r2
 8006280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	011a      	lsls	r2, r3, #4
 8006292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006296:	4413      	add	r3, r2
 8006298:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800629c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	e001      	b.n	80062b2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e03a      	b.n	8006328 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80062ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062f0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	441a      	add	r2, r3
 800630e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800631a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800631e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006322:	b29b      	uxth	r3, r3
 8006324:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2280      	movs	r2, #128	@ 0x80
 8006348:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800637a:	b29b      	uxth	r3, r3
 800637c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800638a:	b480      	push	{r7}
 800638c:	b08b      	sub	sp, #44	@ 0x2c
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	4611      	mov	r1, r2
 8006396:	461a      	mov	r2, r3
 8006398:	460b      	mov	r3, r1
 800639a:	80fb      	strh	r3, [r7, #6]
 800639c:	4613      	mov	r3, r2
 800639e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063a0:	88bb      	ldrh	r3, [r7, #4]
 80063a2:	3301      	adds	r3, #1
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	005a      	lsls	r2, r3, #1
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063c2:	e01f      	b.n	8006404 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	b21b      	sxth	r3, r3
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	b21a      	sxth	r2, r3
 80063d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063da:	4313      	orrs	r3, r2
 80063dc:	b21b      	sxth	r3, r3
 80063de:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	8a7a      	ldrh	r2, [r7, #18]
 80063e4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	3302      	adds	r3, #2
 80063ea:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	3302      	adds	r3, #2
 80063f0:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	3b01      	subs	r3, #1
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
 8006404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1dc      	bne.n	80063c4 <USB_WritePMA+0x3a>
  }
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	372c      	adds	r7, #44	@ 0x2c
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006416:	b480      	push	{r7}
 8006418:	b08b      	sub	sp, #44	@ 0x2c
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	4611      	mov	r1, r2
 8006422:	461a      	mov	r2, r3
 8006424:	460b      	mov	r3, r1
 8006426:	80fb      	strh	r3, [r7, #6]
 8006428:	4613      	mov	r3, r2
 800642a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800642c:	88bb      	ldrh	r3, [r7, #4]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	005a      	lsls	r2, r3, #1
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006448:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
 800644e:	e01b      	b.n	8006488 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	3302      	adds	r3, #2
 800645c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3301      	adds	r3, #1
 800646a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	b2da      	uxtb	r2, r3
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3301      	adds	r3, #1
 800647a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	3302      	adds	r3, #2
 8006480:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	3b01      	subs	r3, #1
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e0      	bne.n	8006450 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800648e:	88bb      	ldrh	r3, [r7, #4]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	701a      	strb	r2, [r3, #0]
  }
}
 80064aa:	bf00      	nop
 80064ac:	372c      	adds	r7, #44	@ 0x2c
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064c6:	2b84      	cmp	r3, #132	@ 0x84
 80064c8:	d005      	beq.n	80064d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4413      	add	r3, r2
 80064d2:	3303      	adds	r3, #3
 80064d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064e6:	f000 fadf 	bl	8006aa8 <vTaskStartScheduler>
  
  return osOK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	b089      	sub	sp, #36	@ 0x24
 80064f4:	af04      	add	r7, sp, #16
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d020      	beq.n	8006544 <osThreadCreate+0x54>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01c      	beq.n	8006544 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685c      	ldr	r4, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691e      	ldr	r6, [r3, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff ffc9 	bl	80064b4 <makeFreeRtosPriority>
 8006522:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800652c:	9202      	str	r2, [sp, #8]
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	9100      	str	r1, [sp, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	4632      	mov	r2, r6
 8006536:	4629      	mov	r1, r5
 8006538:	4620      	mov	r0, r4
 800653a:	f000 f8e8 	bl	800670e <xTaskCreateStatic>
 800653e:	4603      	mov	r3, r0
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	e01c      	b.n	800657e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685c      	ldr	r4, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006550:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff ffab 	bl	80064b4 <makeFreeRtosPriority>
 800655e:	4602      	mov	r2, r0
 8006560:	f107 030c 	add.w	r3, r7, #12
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	9200      	str	r2, [sp, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	4632      	mov	r2, r6
 800656c:	4629      	mov	r1, r5
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f92d 	bl	80067ce <xTaskCreate>
 8006574:	4603      	mov	r3, r0
 8006576:	2b01      	cmp	r3, #1
 8006578:	d001      	beq.n	800657e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006588 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <osDelay+0x16>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	e000      	b.n	80065a0 <osDelay+0x18>
 800659e:	2301      	movs	r3, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fa4b 	bl	8006a3c <vTaskDelay>
  
  return osOK;
 80065a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f103 0208 	add.w	r2, r3, #8
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295
 80065c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f103 0208 	add.w	r2, r3, #8
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f103 0208 	add.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr

080065ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr

08006606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d103      	bne.n	800666c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	e00c      	b.n	8006686 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3308      	adds	r3, #8
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e002      	b.n	800667a <vListInsert+0x2e>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	d2f6      	bcs.n	8006674 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	601a      	str	r2, [r3, #0]
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bc80      	pop	{r7}
 80066ba:	4770      	bx	lr

080066bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6892      	ldr	r2, [r2, #8]
 80066d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6852      	ldr	r2, [r2, #4]
 80066dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d103      	bne.n	80066f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08e      	sub	sp, #56	@ 0x38
 8006712:	af04      	add	r7, sp, #16
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800671c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
 8006738:	e7fd      	b.n	8006736 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	61fb      	str	r3, [r7, #28]
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006758:	2354      	movs	r3, #84	@ 0x54
 800675a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b54      	cmp	r3, #84	@ 0x54
 8006760:	d00b      	beq.n	800677a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	61bb      	str	r3, [r7, #24]
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	e7fd      	b.n	8006776 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800677a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800677c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01e      	beq.n	80067c0 <xTaskCreateStatic+0xb2>
 8006782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01b      	beq.n	80067c0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006790:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	2202      	movs	r2, #2
 8006796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800679a:	2300      	movs	r3, #0
 800679c:	9303      	str	r3, [sp, #12]
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	9302      	str	r3, [sp, #8]
 80067a2:	f107 0314 	add.w	r3, r7, #20
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f850 	bl	8006858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067ba:	f000 f8d5 	bl	8006968 <prvAddNewTaskToReadyList>
 80067be:	e001      	b.n	80067c4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067c4:	697b      	ldr	r3, [r7, #20]
	}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3728      	adds	r7, #40	@ 0x28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b08c      	sub	sp, #48	@ 0x30
 80067d2:	af04      	add	r7, sp, #16
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe74 	bl	80074d0 <pvPortMalloc>
 80067e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00e      	beq.n	800680e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067f0:	2054      	movs	r0, #84	@ 0x54
 80067f2:	f000 fe6d 	bl	80074d0 <pvPortMalloc>
 80067f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	631a      	str	r2, [r3, #48]	@ 0x30
 8006804:	e005      	b.n	8006812 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006806:	6978      	ldr	r0, [r7, #20]
 8006808:	f000 ff30 	bl	800766c <vPortFree>
 800680c:	e001      	b.n	8006812 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d017      	beq.n	8006848 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006820:	88fa      	ldrh	r2, [r7, #6]
 8006822:	2300      	movs	r3, #0
 8006824:	9303      	str	r3, [sp, #12]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	9302      	str	r3, [sp, #8]
 800682a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f80e 	bl	8006858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800683c:	69f8      	ldr	r0, [r7, #28]
 800683e:	f000 f893 	bl	8006968 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006842:	2301      	movs	r3, #1
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	e002      	b.n	800684e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006848:	f04f 33ff 	mov.w	r3, #4294967295
 800684c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800684e:	69bb      	ldr	r3, [r7, #24]
	}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006870:	3b01      	subs	r3, #1
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00b      	beq.n	80068a2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	617b      	str	r3, [r7, #20]
}
 800689c:	bf00      	nop
 800689e:	bf00      	nop
 80068a0:	e7fd      	b.n	800689e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01f      	beq.n	80068e8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	e012      	b.n	80068d4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	4413      	add	r3, r2
 80068b4:	7819      	ldrb	r1, [r3, #0]
 80068b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	3334      	adds	r3, #52	@ 0x34
 80068be:	460a      	mov	r2, r1
 80068c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d006      	beq.n	80068dc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3301      	adds	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	d9e9      	bls.n	80068ae <prvInitialiseNewTask+0x56>
 80068da:	e000      	b.n	80068de <prvInitialiseNewTask+0x86>
			{
				break;
 80068dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068e6:	e003      	b.n	80068f0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d901      	bls.n	80068fa <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068f6:	2306      	movs	r3, #6
 80068f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006904:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2200      	movs	r2, #0
 800690a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	3304      	adds	r3, #4
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fe6c 	bl	80065ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	3318      	adds	r3, #24
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fe67 	bl	80065ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006928:	f1c3 0207 	rsb	r2, r3, #7
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006934:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	2200      	movs	r2, #0
 800693a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800693c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	69b8      	ldr	r0, [r7, #24]
 800694a:	f000 fc0d 	bl	8007168 <pxPortInitialiseStack>
 800694e:	4602      	mov	r2, r0
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006960:	bf00      	nop
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006970:	f000 fcec 	bl	800734c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006974:	4b2a      	ldr	r3, [pc, #168]	@ (8006a20 <prvAddNewTaskToReadyList+0xb8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	4a29      	ldr	r2, [pc, #164]	@ (8006a20 <prvAddNewTaskToReadyList+0xb8>)
 800697c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800697e:	4b29      	ldr	r3, [pc, #164]	@ (8006a24 <prvAddNewTaskToReadyList+0xbc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006986:	4a27      	ldr	r2, [pc, #156]	@ (8006a24 <prvAddNewTaskToReadyList+0xbc>)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800698c:	4b24      	ldr	r3, [pc, #144]	@ (8006a20 <prvAddNewTaskToReadyList+0xb8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d110      	bne.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006994:	f000 fac4 	bl	8006f20 <prvInitialiseTaskLists>
 8006998:	e00d      	b.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800699a:	4b23      	ldr	r3, [pc, #140]	@ (8006a28 <prvAddNewTaskToReadyList+0xc0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069a2:	4b20      	ldr	r3, [pc, #128]	@ (8006a24 <prvAddNewTaskToReadyList+0xbc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d802      	bhi.n	80069b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a24 <prvAddNewTaskToReadyList+0xbc>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069b6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a2c <prvAddNewTaskToReadyList+0xc4>)
 80069be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	2201      	movs	r2, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	4b19      	ldr	r3, [pc, #100]	@ (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	4a18      	ldr	r2, [pc, #96]	@ (8006a30 <prvAddNewTaskToReadyList+0xc8>)
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <prvAddNewTaskToReadyList+0xcc>)
 80069e0:	441a      	add	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7ff fe0c 	bl	8006606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069ee:	f000 fcdd 	bl	80073ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80069f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a28 <prvAddNewTaskToReadyList+0xc0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00e      	beq.n	8006a18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80069fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006a24 <prvAddNewTaskToReadyList+0xbc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d207      	bcs.n	8006a18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a08:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <prvAddNewTaskToReadyList+0xd0>)
 8006a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200007f0 	.word	0x200007f0
 8006a24:	200006f0 	.word	0x200006f0
 8006a28:	200007fc 	.word	0x200007fc
 8006a2c:	2000080c 	.word	0x2000080c
 8006a30:	200007f8 	.word	0x200007f8
 8006a34:	200006f4 	.word	0x200006f4
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a4e:	4b14      	ldr	r3, [pc, #80]	@ (8006aa0 <vTaskDelay+0x64>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00b      	beq.n	8006a6e <vTaskDelay+0x32>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60bb      	str	r3, [r7, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a6e:	f000 f87d 	bl	8006b6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb11 	bl	800709c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a7a:	f000 f885 	bl	8006b88 <xTaskResumeAll>
 8006a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d107      	bne.n	8006a96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006a86:	4b07      	ldr	r3, [pc, #28]	@ (8006aa4 <vTaskDelay+0x68>)
 8006a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000818 	.word	0x20000818
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	@ 0x28
 8006aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ab6:	463a      	mov	r2, r7
 8006ab8:	1d39      	adds	r1, r7, #4
 8006aba:	f107 0308 	add.w	r3, r7, #8
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7f9 fbea 	bl	8000298 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	9202      	str	r2, [sp, #8]
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	460a      	mov	r2, r1
 8006ad6:	491f      	ldr	r1, [pc, #124]	@ (8006b54 <vTaskStartScheduler+0xac>)
 8006ad8:	481f      	ldr	r0, [pc, #124]	@ (8006b58 <vTaskStartScheduler+0xb0>)
 8006ada:	f7ff fe18 	bl	800670e <xTaskCreateStatic>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8006b5c <vTaskStartScheduler+0xb4>)
 8006ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <vTaskStartScheduler+0xb4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006aec:	2301      	movs	r3, #1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	e001      	b.n	8006af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d116      	bne.n	8006b2a <vTaskStartScheduler+0x82>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	613b      	str	r3, [r7, #16]
}
 8006b0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b10:	4b13      	ldr	r3, [pc, #76]	@ (8006b60 <vTaskStartScheduler+0xb8>)
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b18:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <vTaskStartScheduler+0xbc>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b1e:	4b12      	ldr	r3, [pc, #72]	@ (8006b68 <vTaskStartScheduler+0xc0>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b24:	f000 fba0 	bl	8007268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b28:	e00f      	b.n	8006b4a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d10b      	bne.n	8006b4a <vTaskStartScheduler+0xa2>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	60fb      	str	r3, [r7, #12]
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop
 8006b48:	e7fd      	b.n	8006b46 <vTaskStartScheduler+0x9e>
}
 8006b4a:	bf00      	nop
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	08007940 	.word	0x08007940
 8006b58:	08006ef1 	.word	0x08006ef1
 8006b5c:	20000814 	.word	0x20000814
 8006b60:	20000810 	.word	0x20000810
 8006b64:	200007fc 	.word	0x200007fc
 8006b68:	200007f4 	.word	0x200007f4

08006b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b70:	4b04      	ldr	r3, [pc, #16]	@ (8006b84 <vTaskSuspendAll+0x18>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3301      	adds	r3, #1
 8006b76:	4a03      	ldr	r2, [pc, #12]	@ (8006b84 <vTaskSuspendAll+0x18>)
 8006b78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b7a:	bf00      	nop
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20000818 	.word	0x20000818

08006b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b96:	4b42      	ldr	r3, [pc, #264]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	603b      	str	r3, [r7, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bb6:	f000 fbc9 	bl	800734c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bba:	4b39      	ldr	r3, [pc, #228]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	4a37      	ldr	r2, [pc, #220]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bc4:	4b36      	ldr	r3, [pc, #216]	@ (8006ca0 <xTaskResumeAll+0x118>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d161      	bne.n	8006c90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006bcc:	4b35      	ldr	r3, [pc, #212]	@ (8006ca4 <xTaskResumeAll+0x11c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d05d      	beq.n	8006c90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bd4:	e02e      	b.n	8006c34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bd6:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <xTaskResumeAll+0x120>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3318      	adds	r3, #24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fd6a 	bl	80066bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fd65 	bl	80066bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8006cac <xTaskResumeAll+0x124>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	4a2a      	ldr	r2, [pc, #168]	@ (8006cac <xTaskResumeAll+0x124>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4a27      	ldr	r2, [pc, #156]	@ (8006cb0 <xTaskResumeAll+0x128>)
 8006c12:	441a      	add	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4610      	mov	r0, r2
 8006c1c:	f7ff fcf3 	bl	8006606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c24:	4b23      	ldr	r3, [pc, #140]	@ (8006cb4 <xTaskResumeAll+0x12c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c2e:	4b22      	ldr	r3, [pc, #136]	@ (8006cb8 <xTaskResumeAll+0x130>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c34:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca8 <xTaskResumeAll+0x120>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1cc      	bne.n	8006bd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c42:	f000 fa0b 	bl	800705c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c46:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <xTaskResumeAll+0x134>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d010      	beq.n	8006c74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c52:	f000 f837 	bl	8006cc4 <xTaskIncrementTick>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006c5c:	4b16      	ldr	r3, [pc, #88]	@ (8006cb8 <xTaskResumeAll+0x130>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f1      	bne.n	8006c52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006c6e:	4b13      	ldr	r3, [pc, #76]	@ (8006cbc <xTaskResumeAll+0x134>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c74:	4b10      	ldr	r3, [pc, #64]	@ (8006cb8 <xTaskResumeAll+0x130>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c80:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc0 <xTaskResumeAll+0x138>)
 8006c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c90:	f000 fb8c 	bl	80073ac <vPortExitCritical>

	return xAlreadyYielded;
 8006c94:	68bb      	ldr	r3, [r7, #8]
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000818 	.word	0x20000818
 8006ca4:	200007f0 	.word	0x200007f0
 8006ca8:	200007b0 	.word	0x200007b0
 8006cac:	200007f8 	.word	0x200007f8
 8006cb0:	200006f4 	.word	0x200006f4
 8006cb4:	200006f0 	.word	0x200006f0
 8006cb8:	20000804 	.word	0x20000804
 8006cbc:	20000800 	.word	0x20000800
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cce:	4b4f      	ldr	r3, [pc, #316]	@ (8006e0c <xTaskIncrementTick+0x148>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 808f 	bne.w	8006df6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cd8:	4b4d      	ldr	r3, [pc, #308]	@ (8006e10 <xTaskIncrementTick+0x14c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ce0:	4a4b      	ldr	r2, [pc, #300]	@ (8006e10 <xTaskIncrementTick+0x14c>)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d121      	bne.n	8006d30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006cec:	4b49      	ldr	r3, [pc, #292]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	603b      	str	r3, [r7, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xTaskIncrementTick+0x46>
 8006d0e:	4b41      	ldr	r3, [pc, #260]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	4b40      	ldr	r3, [pc, #256]	@ (8006e18 <xTaskIncrementTick+0x154>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3e      	ldr	r2, [pc, #248]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e18 <xTaskIncrementTick+0x154>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	4b3e      	ldr	r3, [pc, #248]	@ (8006e1c <xTaskIncrementTick+0x158>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3301      	adds	r3, #1
 8006d28:	4a3c      	ldr	r2, [pc, #240]	@ (8006e1c <xTaskIncrementTick+0x158>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	f000 f996 	bl	800705c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d30:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <xTaskIncrementTick+0x15c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d348      	bcc.n	8006dcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3a:	4b36      	ldr	r3, [pc, #216]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d44:	4b36      	ldr	r3, [pc, #216]	@ (8006e20 <xTaskIncrementTick+0x15c>)
 8006d46:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4a:	601a      	str	r2, [r3, #0]
					break;
 8006d4c:	e03e      	b.n	8006dcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d4e:	4b31      	ldr	r3, [pc, #196]	@ (8006e14 <xTaskIncrementTick+0x150>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d203      	bcs.n	8006d6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d66:	4a2e      	ldr	r2, [pc, #184]	@ (8006e20 <xTaskIncrementTick+0x15c>)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d6c:	e02e      	b.n	8006dcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fca2 	bl	80066bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	3318      	adds	r3, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fc99 	bl	80066bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8e:	2201      	movs	r2, #1
 8006d90:	409a      	lsls	r2, r3
 8006d92:	4b24      	ldr	r3, [pc, #144]	@ (8006e24 <xTaskIncrementTick+0x160>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	4a22      	ldr	r2, [pc, #136]	@ (8006e24 <xTaskIncrementTick+0x160>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e28 <xTaskIncrementTick+0x164>)
 8006daa:	441a      	add	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7ff fc27 	bl	8006606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e2c <xTaskIncrementTick+0x168>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d3b9      	bcc.n	8006d3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dca:	e7b6      	b.n	8006d3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006dcc:	4b17      	ldr	r3, [pc, #92]	@ (8006e2c <xTaskIncrementTick+0x168>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd2:	4915      	ldr	r1, [pc, #84]	@ (8006e28 <xTaskIncrementTick+0x164>)
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d901      	bls.n	8006de8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <xTaskIncrementTick+0x16c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d007      	beq.n	8006e00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	e004      	b.n	8006e00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <xTaskIncrementTick+0x170>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8006e34 <xTaskIncrementTick+0x170>)
 8006dfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e00:	697b      	ldr	r3, [r7, #20]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000818 	.word	0x20000818
 8006e10:	200007f4 	.word	0x200007f4
 8006e14:	200007a8 	.word	0x200007a8
 8006e18:	200007ac 	.word	0x200007ac
 8006e1c:	20000808 	.word	0x20000808
 8006e20:	20000810 	.word	0x20000810
 8006e24:	200007f8 	.word	0x200007f8
 8006e28:	200006f4 	.word	0x200006f4
 8006e2c:	200006f0 	.word	0x200006f0
 8006e30:	20000804 	.word	0x20000804
 8006e34:	20000800 	.word	0x20000800

08006e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e3e:	4b27      	ldr	r3, [pc, #156]	@ (8006edc <vTaskSwitchContext+0xa4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d003      	beq.n	8006e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e46:	4b26      	ldr	r3, [pc, #152]	@ (8006ee0 <vTaskSwitchContext+0xa8>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e4c:	e040      	b.n	8006ed0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006e4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <vTaskSwitchContext+0xa8>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e54:	4b23      	ldr	r3, [pc, #140]	@ (8006ee4 <vTaskSwitchContext+0xac>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	fab3 f383 	clz	r3, r3
 8006e60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	f1c3 031f 	rsb	r3, r3, #31
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	491f      	ldr	r1, [pc, #124]	@ (8006ee8 <vTaskSwitchContext+0xb0>)
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	607b      	str	r3, [r7, #4]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <vTaskSwitchContext+0x5a>
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4a11      	ldr	r2, [pc, #68]	@ (8006ee8 <vTaskSwitchContext+0xb0>)
 8006ea2:	4413      	add	r3, r2
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d104      	bne.n	8006ec6 <vTaskSwitchContext+0x8e>
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	4a07      	ldr	r2, [pc, #28]	@ (8006eec <vTaskSwitchContext+0xb4>)
 8006ece:	6013      	str	r3, [r2, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000818 	.word	0x20000818
 8006ee0:	20000804 	.word	0x20000804
 8006ee4:	200007f8 	.word	0x200007f8
 8006ee8:	200006f4 	.word	0x200006f4
 8006eec:	200006f0 	.word	0x200006f0

08006ef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ef8:	f000 f852 	bl	8006fa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006efc:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <prvIdleTask+0x28>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d9f9      	bls.n	8006ef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f04:	4b05      	ldr	r3, [pc, #20]	@ (8006f1c <prvIdleTask+0x2c>)
 8006f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f14:	e7f0      	b.n	8006ef8 <prvIdleTask+0x8>
 8006f16:	bf00      	nop
 8006f18:	200006f4 	.word	0x200006f4
 8006f1c:	e000ed04 	.word	0xe000ed04

08006f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]
 8006f2a:	e00c      	b.n	8006f46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4a12      	ldr	r2, [pc, #72]	@ (8006f80 <prvInitialiseTaskLists+0x60>)
 8006f38:	4413      	add	r3, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fb38 	bl	80065b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3301      	adds	r3, #1
 8006f44:	607b      	str	r3, [r7, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b06      	cmp	r3, #6
 8006f4a:	d9ef      	bls.n	8006f2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f4c:	480d      	ldr	r0, [pc, #52]	@ (8006f84 <prvInitialiseTaskLists+0x64>)
 8006f4e:	f7ff fb2f 	bl	80065b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f52:	480d      	ldr	r0, [pc, #52]	@ (8006f88 <prvInitialiseTaskLists+0x68>)
 8006f54:	f7ff fb2c 	bl	80065b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f58:	480c      	ldr	r0, [pc, #48]	@ (8006f8c <prvInitialiseTaskLists+0x6c>)
 8006f5a:	f7ff fb29 	bl	80065b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f5e:	480c      	ldr	r0, [pc, #48]	@ (8006f90 <prvInitialiseTaskLists+0x70>)
 8006f60:	f7ff fb26 	bl	80065b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f64:	480b      	ldr	r0, [pc, #44]	@ (8006f94 <prvInitialiseTaskLists+0x74>)
 8006f66:	f7ff fb23 	bl	80065b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <prvInitialiseTaskLists+0x78>)
 8006f6c:	4a05      	ldr	r2, [pc, #20]	@ (8006f84 <prvInitialiseTaskLists+0x64>)
 8006f6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f70:	4b0a      	ldr	r3, [pc, #40]	@ (8006f9c <prvInitialiseTaskLists+0x7c>)
 8006f72:	4a05      	ldr	r2, [pc, #20]	@ (8006f88 <prvInitialiseTaskLists+0x68>)
 8006f74:	601a      	str	r2, [r3, #0]
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200006f4 	.word	0x200006f4
 8006f84:	20000780 	.word	0x20000780
 8006f88:	20000794 	.word	0x20000794
 8006f8c:	200007b0 	.word	0x200007b0
 8006f90:	200007c4 	.word	0x200007c4
 8006f94:	200007dc 	.word	0x200007dc
 8006f98:	200007a8 	.word	0x200007a8
 8006f9c:	200007ac 	.word	0x200007ac

08006fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa6:	e019      	b.n	8006fdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fa8:	f000 f9d0 	bl	800734c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fac:	4b10      	ldr	r3, [pc, #64]	@ (8006ff0 <prvCheckTasksWaitingTermination+0x50>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fb7f 	bl	80066bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x54>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ff4 <prvCheckTasksWaitingTermination+0x54>)
 8006fc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	4a0a      	ldr	r2, [pc, #40]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fd2:	f000 f9eb 	bl	80073ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f810 	bl	8006ffc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fdc:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <prvCheckTasksWaitingTermination+0x58>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e1      	bne.n	8006fa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200007c4 	.word	0x200007c4
 8006ff4:	200007f0 	.word	0x200007f0
 8006ff8:	200007d8 	.word	0x200007d8

08006ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800700a:	2b00      	cmp	r3, #0
 800700c:	d108      	bne.n	8007020 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fb2a 	bl	800766c <vPortFree>
				vPortFree( pxTCB );
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fb27 	bl	800766c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800701e:	e019      	b.n	8007054 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007026:	2b01      	cmp	r3, #1
 8007028:	d103      	bne.n	8007032 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb1e 	bl	800766c <vPortFree>
	}
 8007030:	e010      	b.n	8007054 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007038:	2b02      	cmp	r3, #2
 800703a:	d00b      	beq.n	8007054 <prvDeleteTCB+0x58>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	60fb      	str	r3, [r7, #12]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <prvDeleteTCB+0x54>
	}
 8007054:	bf00      	nop
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007062:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <prvResetNextTaskUnblockTime+0x38>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <prvResetNextTaskUnblockTime+0x3c>)
 800706e:	f04f 32ff 	mov.w	r2, #4294967295
 8007072:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007074:	e008      	b.n	8007088 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007076:	4b07      	ldr	r3, [pc, #28]	@ (8007094 <prvResetNextTaskUnblockTime+0x38>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a04      	ldr	r2, [pc, #16]	@ (8007098 <prvResetNextTaskUnblockTime+0x3c>)
 8007086:	6013      	str	r3, [r2, #0]
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	200007a8 	.word	0x200007a8
 8007098:	20000810 	.word	0x20000810

0800709c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070a6:	4b29      	ldr	r3, [pc, #164]	@ (800714c <prvAddCurrentTaskToDelayedList+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070ac:	4b28      	ldr	r3, [pc, #160]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7ff fb02 	bl	80066bc <uxListRemove>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10b      	bne.n	80070d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070be:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	2201      	movs	r2, #1
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	43da      	mvns	r2, r3
 80070cc:	4b21      	ldr	r3, [pc, #132]	@ (8007154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4013      	ands	r3, r2
 80070d2:	4a20      	ldr	r2, [pc, #128]	@ (8007154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d10a      	bne.n	80070f4 <prvAddCurrentTaskToDelayedList+0x58>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3304      	adds	r3, #4
 80070ea:	4619      	mov	r1, r3
 80070ec:	481a      	ldr	r0, [pc, #104]	@ (8007158 <prvAddCurrentTaskToDelayedList+0xbc>)
 80070ee:	f7ff fa8a 	bl	8006606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070f2:	e026      	b.n	8007142 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4413      	add	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070fc:	4b14      	ldr	r3, [pc, #80]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	429a      	cmp	r2, r3
 800710a:	d209      	bcs.n	8007120 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800710c:	4b13      	ldr	r3, [pc, #76]	@ (800715c <prvAddCurrentTaskToDelayedList+0xc0>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b0f      	ldr	r3, [pc, #60]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3304      	adds	r3, #4
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f7ff fa97 	bl	800664c <vListInsert>
}
 800711e:	e010      	b.n	8007142 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007120:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3304      	adds	r3, #4
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f7ff fa8d 	bl	800664c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	429a      	cmp	r2, r3
 800713a:	d202      	bcs.n	8007142 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800713c:	4a09      	ldr	r2, [pc, #36]	@ (8007164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6013      	str	r3, [r2, #0]
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	200007f4 	.word	0x200007f4
 8007150:	200006f0 	.word	0x200006f0
 8007154:	200007f8 	.word	0x200007f8
 8007158:	200007dc 	.word	0x200007dc
 800715c:	200007ac 	.word	0x200007ac
 8007160:	200007a8 	.word	0x200007a8
 8007164:	20000810 	.word	0x20000810

08007168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3b04      	subs	r3, #4
 8007178:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b04      	subs	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b04      	subs	r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007198:	4a08      	ldr	r2, [pc, #32]	@ (80071bc <pxPortInitialiseStack+0x54>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3b14      	subs	r3, #20
 80071a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b20      	subs	r3, #32
 80071ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071b0:	68fb      	ldr	r3, [r7, #12]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr
 80071bc:	080071c1 	.word	0x080071c1

080071c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071ca:	4b12      	ldr	r3, [pc, #72]	@ (8007214 <prvTaskExitError+0x54>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d2:	d00b      	beq.n	80071ec <prvTaskExitError+0x2c>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	60fb      	str	r3, [r7, #12]
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <prvTaskExitError+0x28>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60bb      	str	r3, [r7, #8]
}
 80071fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007200:	bf00      	nop
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0fc      	beq.n	8007202 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	2000000c 	.word	0x2000000c
	...

08007220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007220:	4b07      	ldr	r3, [pc, #28]	@ (8007240 <pxCurrentTCBConst2>)
 8007222:	6819      	ldr	r1, [r3, #0]
 8007224:	6808      	ldr	r0, [r1, #0]
 8007226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800722a:	f380 8809 	msr	PSP, r0
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f04f 0000 	mov.w	r0, #0
 8007236:	f380 8811 	msr	BASEPRI, r0
 800723a:	f04e 0e0d 	orr.w	lr, lr, #13
 800723e:	4770      	bx	lr

08007240 <pxCurrentTCBConst2>:
 8007240:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007248:	4806      	ldr	r0, [pc, #24]	@ (8007264 <prvPortStartFirstTask+0x1c>)
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	6800      	ldr	r0, [r0, #0]
 800724e:	f380 8808 	msr	MSP, r0
 8007252:	b662      	cpsie	i
 8007254:	b661      	cpsie	f
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	df00      	svc	0
 8007260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007262:	bf00      	nop
 8007264:	e000ed08 	.word	0xe000ed08

08007268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800726e:	4b32      	ldr	r3, [pc, #200]	@ (8007338 <xPortStartScheduler+0xd0>)
 8007270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	22ff      	movs	r2, #255	@ 0xff
 800727e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	b2db      	uxtb	r3, r3
 800728c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007290:	b2da      	uxtb	r2, r3
 8007292:	4b2a      	ldr	r3, [pc, #168]	@ (800733c <xPortStartScheduler+0xd4>)
 8007294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007296:	4b2a      	ldr	r3, [pc, #168]	@ (8007340 <xPortStartScheduler+0xd8>)
 8007298:	2207      	movs	r2, #7
 800729a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800729c:	e009      	b.n	80072b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800729e:	4b28      	ldr	r3, [pc, #160]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4a26      	ldr	r2, [pc, #152]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ba:	2b80      	cmp	r3, #128	@ 0x80
 80072bc:	d0ef      	beq.n	800729e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072be:	4b20      	ldr	r3, [pc, #128]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1c3 0307 	rsb	r3, r3, #7
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	d00b      	beq.n	80072e2 <xPortStartScheduler+0x7a>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	60bb      	str	r3, [r7, #8]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072e2:	4b17      	ldr	r3, [pc, #92]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072ec:	4b14      	ldr	r3, [pc, #80]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072f4:	4a12      	ldr	r2, [pc, #72]	@ (8007340 <xPortStartScheduler+0xd8>)
 80072f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007300:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <xPortStartScheduler+0xdc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a0f      	ldr	r2, [pc, #60]	@ (8007344 <xPortStartScheduler+0xdc>)
 8007306:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800730a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800730c:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <xPortStartScheduler+0xdc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0c      	ldr	r2, [pc, #48]	@ (8007344 <xPortStartScheduler+0xdc>)
 8007312:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007316:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007318:	f000 f8b8 	bl	800748c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800731c:	4b0a      	ldr	r3, [pc, #40]	@ (8007348 <xPortStartScheduler+0xe0>)
 800731e:	2200      	movs	r2, #0
 8007320:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007322:	f7ff ff91 	bl	8007248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007326:	f7ff fd87 	bl	8006e38 <vTaskSwitchContext>
	prvTaskExitError();
 800732a:	f7ff ff49 	bl	80071c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	e000e400 	.word	0xe000e400
 800733c:	2000081c 	.word	0x2000081c
 8007340:	20000820 	.word	0x20000820
 8007344:	e000ed20 	.word	0xe000ed20
 8007348:	2000000c 	.word	0x2000000c

0800734c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	607b      	str	r3, [r7, #4]
}
 8007364:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007366:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <vPortEnterCritical+0x58>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	4a0d      	ldr	r2, [pc, #52]	@ (80073a4 <vPortEnterCritical+0x58>)
 800736e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007370:	4b0c      	ldr	r3, [pc, #48]	@ (80073a4 <vPortEnterCritical+0x58>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d110      	bne.n	800739a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007378:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <vPortEnterCritical+0x5c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <vPortEnterCritical+0x4e>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	603b      	str	r3, [r7, #0]
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	e7fd      	b.n	8007396 <vPortEnterCritical+0x4a>
	}
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr
 80073a4:	2000000c 	.word	0x2000000c
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073b2:	4b12      	ldr	r3, [pc, #72]	@ (80073fc <vPortExitCritical+0x50>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <vPortExitCritical+0x26>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	607b      	str	r3, [r7, #4]
}
 80073cc:	bf00      	nop
 80073ce:	bf00      	nop
 80073d0:	e7fd      	b.n	80073ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073d2:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <vPortExitCritical+0x50>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	4a08      	ldr	r2, [pc, #32]	@ (80073fc <vPortExitCritical+0x50>)
 80073da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073dc:	4b07      	ldr	r3, [pc, #28]	@ (80073fc <vPortExitCritical+0x50>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <vPortExitCritical+0x44>
 80073e4:	2300      	movs	r3, #0
 80073e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	2000000c 	.word	0x2000000c

08007400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007400:	f3ef 8009 	mrs	r0, PSP
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	4b0d      	ldr	r3, [pc, #52]	@ (8007440 <pxCurrentTCBConst>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007410:	6010      	str	r0, [r2, #0]
 8007412:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007416:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800741a:	f380 8811 	msr	BASEPRI, r0
 800741e:	f7ff fd0b 	bl	8006e38 <vTaskSwitchContext>
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8811 	msr	BASEPRI, r0
 800742a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800742e:	6819      	ldr	r1, [r3, #0]
 8007430:	6808      	ldr	r0, [r1, #0]
 8007432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007436:	f380 8809 	msr	PSP, r0
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	4770      	bx	lr

08007440 <pxCurrentTCBConst>:
 8007440:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	607b      	str	r3, [r7, #4]
}
 8007460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007462:	f7ff fc2f 	bl	8006cc4 <xTaskIncrementTick>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d003      	beq.n	8007474 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800746c:	4b06      	ldr	r3, [pc, #24]	@ (8007488 <SysTick_Handler+0x40>)
 800746e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	2300      	movs	r3, #0
 8007476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f383 8811 	msr	BASEPRI, r3
}
 800747e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	e000ed04 	.word	0xe000ed04

0800748c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <vPortSetupTimerInterrupt+0x30>)
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007496:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <vPortSetupTimerInterrupt+0x34>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800749c:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <vPortSetupTimerInterrupt+0x38>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a09      	ldr	r2, [pc, #36]	@ (80074c8 <vPortSetupTimerInterrupt+0x3c>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <vPortSetupTimerInterrupt+0x40>)
 80074aa:	3b01      	subs	r3, #1
 80074ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ae:	4b03      	ldr	r3, [pc, #12]	@ (80074bc <vPortSetupTimerInterrupt+0x30>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr
 80074bc:	e000e010 	.word	0xe000e010
 80074c0:	e000e018 	.word	0xe000e018
 80074c4:	20000000 	.word	0x20000000
 80074c8:	10624dd3 	.word	0x10624dd3
 80074cc:	e000e014 	.word	0xe000e014

080074d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	@ 0x28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074dc:	f7ff fb46 	bl	8006b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074e0:	4b5c      	ldr	r3, [pc, #368]	@ (8007654 <pvPortMalloc+0x184>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074e8:	f000 f924 	bl	8007734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007658 <pvPortMalloc+0x188>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8095 	bne.w	8007624 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01e      	beq.n	800753e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007500:	2208      	movs	r2, #8
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4413      	add	r3, r2
 8007506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b00      	cmp	r3, #0
 8007510:	d015      	beq.n	800753e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f023 0307 	bic.w	r3, r3, #7
 8007518:	3308      	adds	r3, #8
 800751a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <pvPortMalloc+0x6e>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	617b      	str	r3, [r7, #20]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d06f      	beq.n	8007624 <pvPortMalloc+0x154>
 8007544:	4b45      	ldr	r3, [pc, #276]	@ (800765c <pvPortMalloc+0x18c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	429a      	cmp	r2, r3
 800754c:	d86a      	bhi.n	8007624 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800754e:	4b44      	ldr	r3, [pc, #272]	@ (8007660 <pvPortMalloc+0x190>)
 8007550:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007552:	4b43      	ldr	r3, [pc, #268]	@ (8007660 <pvPortMalloc+0x190>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007558:	e004      	b.n	8007564 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	429a      	cmp	r2, r3
 800756c:	d903      	bls.n	8007576 <pvPortMalloc+0xa6>
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f1      	bne.n	800755a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007576:	4b37      	ldr	r3, [pc, #220]	@ (8007654 <pvPortMalloc+0x184>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757c:	429a      	cmp	r2, r3
 800757e:	d051      	beq.n	8007624 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2208      	movs	r2, #8
 8007586:	4413      	add	r3, r2
 8007588:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	1ad2      	subs	r2, r2, r3
 800759a:	2308      	movs	r3, #8
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	429a      	cmp	r2, r3
 80075a0:	d920      	bls.n	80075e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4413      	add	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <pvPortMalloc+0xfc>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	613b      	str	r3, [r7, #16]
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	1ad2      	subs	r2, r2, r3
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075de:	69b8      	ldr	r0, [r7, #24]
 80075e0:	f000 f90a 	bl	80077f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075e4:	4b1d      	ldr	r3, [pc, #116]	@ (800765c <pvPortMalloc+0x18c>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1b      	ldr	r2, [pc, #108]	@ (800765c <pvPortMalloc+0x18c>)
 80075f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075f2:	4b1a      	ldr	r3, [pc, #104]	@ (800765c <pvPortMalloc+0x18c>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007664 <pvPortMalloc+0x194>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d203      	bcs.n	8007606 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075fe:	4b17      	ldr	r3, [pc, #92]	@ (800765c <pvPortMalloc+0x18c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a18      	ldr	r2, [pc, #96]	@ (8007664 <pvPortMalloc+0x194>)
 8007604:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	4b13      	ldr	r3, [pc, #76]	@ (8007658 <pvPortMalloc+0x188>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	431a      	orrs	r2, r3
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800761a:	4b13      	ldr	r3, [pc, #76]	@ (8007668 <pvPortMalloc+0x198>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a11      	ldr	r2, [pc, #68]	@ (8007668 <pvPortMalloc+0x198>)
 8007622:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007624:	f7ff fab0 	bl	8006b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <pvPortMalloc+0x17a>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	60fb      	str	r3, [r7, #12]
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	e7fd      	b.n	8007646 <pvPortMalloc+0x176>
	return pvReturn;
 800764a:	69fb      	ldr	r3, [r7, #28]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3728      	adds	r7, #40	@ 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	2000142c 	.word	0x2000142c
 8007658:	20001440 	.word	0x20001440
 800765c:	20001430 	.word	0x20001430
 8007660:	20001424 	.word	0x20001424
 8007664:	20001434 	.word	0x20001434
 8007668:	20001438 	.word	0x20001438

0800766c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d04f      	beq.n	800771e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800767e:	2308      	movs	r3, #8
 8007680:	425b      	negs	r3, r3
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	4b25      	ldr	r3, [pc, #148]	@ (8007728 <vPortFree+0xbc>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <vPortFree+0x46>
	__asm volatile
 800769a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60fb      	str	r3, [r7, #12]
}
 80076ac:	bf00      	nop
 80076ae:	bf00      	nop
 80076b0:	e7fd      	b.n	80076ae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <vPortFree+0x66>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	60bb      	str	r3, [r7, #8]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	4b14      	ldr	r3, [pc, #80]	@ (8007728 <vPortFree+0xbc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4013      	ands	r3, r2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01e      	beq.n	800771e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d11a      	bne.n	800771e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007728 <vPortFree+0xbc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	43db      	mvns	r3, r3
 80076f2:	401a      	ands	r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076f8:	f7ff fa38 	bl	8006b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <vPortFree+0xc0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4413      	add	r3, r2
 8007706:	4a09      	ldr	r2, [pc, #36]	@ (800772c <vPortFree+0xc0>)
 8007708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800770a:	6938      	ldr	r0, [r7, #16]
 800770c:	f000 f874 	bl	80077f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007710:	4b07      	ldr	r3, [pc, #28]	@ (8007730 <vPortFree+0xc4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	4a06      	ldr	r2, [pc, #24]	@ (8007730 <vPortFree+0xc4>)
 8007718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800771a:	f7ff fa35 	bl	8006b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800771e:	bf00      	nop
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20001440 	.word	0x20001440
 800772c:	20001430 	.word	0x20001430
 8007730:	2000143c 	.word	0x2000143c

08007734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800773a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800773e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007740:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <prvHeapInit+0xac>)
 8007742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00c      	beq.n	8007768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3307      	adds	r3, #7
 8007752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	4a1f      	ldr	r2, [pc, #124]	@ (80077e0 <prvHeapInit+0xac>)
 8007764:	4413      	add	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800776c:	4a1d      	ldr	r2, [pc, #116]	@ (80077e4 <prvHeapInit+0xb0>)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007772:	4b1c      	ldr	r3, [pc, #112]	@ (80077e4 <prvHeapInit+0xb0>)
 8007774:	2200      	movs	r2, #0
 8007776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007780:	2208      	movs	r2, #8
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1a9b      	subs	r3, r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a15      	ldr	r2, [pc, #84]	@ (80077e8 <prvHeapInit+0xb4>)
 8007794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007796:	4b14      	ldr	r3, [pc, #80]	@ (80077e8 <prvHeapInit+0xb4>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800779e:	4b12      	ldr	r3, [pc, #72]	@ (80077e8 <prvHeapInit+0xb4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	1ad2      	subs	r2, r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077b4:	4b0c      	ldr	r3, [pc, #48]	@ (80077e8 <prvHeapInit+0xb4>)
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <prvHeapInit+0xb8>)
 80077c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <prvHeapInit+0xbc>)
 80077ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077cc:	4b09      	ldr	r3, [pc, #36]	@ (80077f4 <prvHeapInit+0xc0>)
 80077ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000824 	.word	0x20000824
 80077e4:	20001424 	.word	0x20001424
 80077e8:	2000142c 	.word	0x2000142c
 80077ec:	20001434 	.word	0x20001434
 80077f0:	20001430 	.word	0x20001430
 80077f4:	20001440 	.word	0x20001440

080077f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007800:	4b27      	ldr	r3, [pc, #156]	@ (80078a0 <prvInsertBlockIntoFreeList+0xa8>)
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	e002      	b.n	800780c <prvInsertBlockIntoFreeList+0x14>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	429a      	cmp	r2, r3
 8007814:	d8f7      	bhi.n	8007806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4413      	add	r3, r2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d108      	bne.n	800783a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	441a      	add	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	441a      	add	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	429a      	cmp	r2, r3
 800784c:	d118      	bne.n	8007880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <prvInsertBlockIntoFreeList+0xac>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d00d      	beq.n	8007876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	441a      	add	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e008      	b.n	8007888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007876:	4b0b      	ldr	r3, [pc, #44]	@ (80078a4 <prvInsertBlockIntoFreeList+0xac>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	e003      	b.n	8007888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d002      	beq.n	8007896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr
 80078a0:	20001424 	.word	0x20001424
 80078a4:	2000142c 	.word	0x2000142c

080078a8 <memset>:
 80078a8:	4603      	mov	r3, r0
 80078aa:	4402      	add	r2, r0
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d100      	bne.n	80078b2 <memset+0xa>
 80078b0:	4770      	bx	lr
 80078b2:	f803 1b01 	strb.w	r1, [r3], #1
 80078b6:	e7f9      	b.n	80078ac <memset+0x4>

080078b8 <__libc_init_array>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	2600      	movs	r6, #0
 80078bc:	4d0c      	ldr	r5, [pc, #48]	@ (80078f0 <__libc_init_array+0x38>)
 80078be:	4c0d      	ldr	r4, [pc, #52]	@ (80078f4 <__libc_init_array+0x3c>)
 80078c0:	1b64      	subs	r4, r4, r5
 80078c2:	10a4      	asrs	r4, r4, #2
 80078c4:	42a6      	cmp	r6, r4
 80078c6:	d109      	bne.n	80078dc <__libc_init_array+0x24>
 80078c8:	f000 f81a 	bl	8007900 <_init>
 80078cc:	2600      	movs	r6, #0
 80078ce:	4d0a      	ldr	r5, [pc, #40]	@ (80078f8 <__libc_init_array+0x40>)
 80078d0:	4c0a      	ldr	r4, [pc, #40]	@ (80078fc <__libc_init_array+0x44>)
 80078d2:	1b64      	subs	r4, r4, r5
 80078d4:	10a4      	asrs	r4, r4, #2
 80078d6:	42a6      	cmp	r6, r4
 80078d8:	d105      	bne.n	80078e6 <__libc_init_array+0x2e>
 80078da:	bd70      	pop	{r4, r5, r6, pc}
 80078dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e0:	4798      	blx	r3
 80078e2:	3601      	adds	r6, #1
 80078e4:	e7ee      	b.n	80078c4 <__libc_init_array+0xc>
 80078e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ea:	4798      	blx	r3
 80078ec:	3601      	adds	r6, #1
 80078ee:	e7f2      	b.n	80078d6 <__libc_init_array+0x1e>
 80078f0:	08007974 	.word	0x08007974
 80078f4:	08007974 	.word	0x08007974
 80078f8:	08007974 	.word	0x08007974
 80078fc:	08007978 	.word	0x08007978

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
